{
  "hash": "d7a307c248f87daf024c71be86a58f00",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lakehouse på Dapla Lab\nsubtitle: Bruk av Delta Lake (uten Spark) på Dapla Lab\ncategories:\n  - Delta Lake\n  - Python\n  - delta-rs\n  - Lakehouse\nauthor:\n  - name: Øyvind Bruer-Skarsbø\n    affiliation:\n      - name: Seksjon for dataplattform (724)\n        email: obr@ssb.no\nimage: delta-rust-logo.svg\ndate: 01/16/2025\ndate-modified: 01/16/2025\nfreeze: true\ndraft: false\njupyter: test-kernel\n---\n\n\n\n\n\n\nLakehouse er konsept rundt lagring i bøtter\n\n## Forberedelser\n\nFor å bruke deltalake må man installere python-pakken. Det enkleste er å gjøre det i et ssb-project.\n\n1.  Start opp din favoritttjeneste på Dapla Lab[^1] som `dapla-felles-developers`.\n2.  Kjør følgende kommando i terminalen: `cd /home/onyxia/work && ssb-project create test-deltalake`\n3.  Gå inn i prosjektmappen: `cd /home/onyxia/work/test-deltalake`\n4.  Installer nødvendige pakker: `poetry add pandas deltalake`\n\n[^1]: Jupyterlab og Vs Code har Python installert.\n\nDermed er du klar for å kjøre eksemplene under.\n\n## Skrive til bøtte\n\nLa oss opprette en fiktiv Pandas-dataframe:\n\n::: {#41a48a90 .cell execution_count=1}\n``` {.python .cell-code}\nfrom deltalake import DeltaTable, write_deltalake\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"fnr\": [111111111, 222222222, 333333333],\n        \"navn\": [\"oyvind\", \"Miles\", \"Mike\"],\n    }\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fnr</th>\n      <th>navn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>111111111</td>\n      <td>oyvind</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>222222222</td>\n      <td>Miles</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>333333333</td>\n      <td>Mike</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDeretter kan vi skrive tabellen til produkt-bøtta til team dapla-felles:\n\n``` python\ntable_path = \"gs://ssb-dapla-felles-data-produkt-prod/deltrs-test/tulledata_p2025-Q1\"\n\nwrite_deltalake(table_path, df)\n```\n\nHvis du vil kjøre dette eksempelet selv, så bytter du ut `tulledata_p2025-Q1` med et annet unikt navn.\n\n## Lese inn en tabell\n\nVi starter med å lese objektet inn i minnet og printe ut litt informasjon omd den:\n\n::: {#c9dbffac .cell execution_count=2}\n``` {.python .cell-code}\nfrom deltalake import DeltaTable\n\ntable_path = \"gs://ssb-dapla-felles-data-produkt-prod/deltrs-test/tulledata_p2025-Q1\"\n\ndt = DeltaTable(table_path)\nprint(f\"Version: {dt.version()}\")\nprint(f\"Files: {dt.files()}\")\nprint(f\"Object: {type(dt)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion: 0\nFiles: ['part-00001-b957e24c-0c22-476d-813b-8142af00a8a0-c000.snappy.parquet']\nObject: <class 'deltalake.table.DeltaTable'>\n```\n:::\n:::\n\n\nVi har nå lest metadatene til DeltaTable-objektet inn i minnet. La oss materialisere objektet til en Pandas dataframe:\n\n::: {#f353b282 .cell execution_count=3}\n``` {.python .cell-code}\n#df2 = dt.to_pandas()\n#df2\nprint(dt.schema())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSchema([Field(fnr, PrimitiveType(\"long\"), nullable=True), Field(navn, PrimitiveType(\"string\"), nullable=True)])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}