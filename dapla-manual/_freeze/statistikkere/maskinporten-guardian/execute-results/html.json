{
  "hash": "f8c93fee9f2a1131c4f23fca4ef4849c",
  "result": {
    "markdown": "---\ntitle: Maskinporten Guardian\nfreeze: true\nexecute:\n    echo: false\n    include: true\n---\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nSist endret: 2024-10-31 av Kenneth Leine Schulstad\n```\n:::\n:::\n\n\n## Maskinporten\n\nMaskinporten er en tjeneste fra Digdir som gir sikker autentisering og tilgangskontroll for datautveksling mellom virksomheter.\n\nTilgangsstyring for data administeres via et webgrensesnitt ([Samarbeidsportalen](https://samarbeid.digdir.no/))\nEn virksomhet som deler data (API-tilbyder) definerer såkalte _API scopes_, og velger hvilke andre virksomheter\n(API-konsumenter) som skal ha tilgang til disse. API-konsumenter kan på sin side selv opprette en eller flere\n_Maskinporten-klienter_ og gir de tilgang til API scopes som er delt med virksomheten.\n\n![Datauveksling mellom virksomheter](../images/maskinporten-utveksling.png){fig-alt=\"Maskinportens rolle er å være et tillitsanker - en sikringsmekanisme for trygg deling av data som sikrer at data bare flyter dit de skal.\" fig-align=\"left\" #fig-maskinporten-utveksling}\n\nLes mer om Maskinporten [her](https://samarbeid.digdir.no/maskinporten/dette-er-maskinporten/96).\n\n\n## Hva gjør Maskinporten Guardian?\n\nUtveksling av data fra en API-tilbyder gjøres ved å inkludere et _sikkerhetstoken_ som hentes fra Maskinporten\npå vegne av virksomheten man representerer (f. eks SSB). Hvilke data (_API scopes_) et sikkerhetstoken har\ntilgang til er knyttet til Maskinporten-klienten. For å hente et sikkerhetstoken for en klient, kreves det at man\nautentiserer seg som virksomhet. Dette gjøres ved å signere forespørsler til Maskinporten ved bruk av et\nvirksomhetssertifikat. Det er her [Maskinporten Guardian](https://github.com/statisticsnorway/maskinporten-guardian)\nkommer inn i bildet.\n\nMaskinporten Guardian har tilgang til SSBs virksomhetssertifikat og kan dermed signere forespørsler mot Maskinporten\nfor å hente ut sikkerhetstokens. \n\n\n## Komme igang\n\nHvis en skal ta i bruk et API som er beskyttet av Maskinporten er det noen steg som må gjøres i forkant:\n\n\n```{mermaid}\nflowchart TD\n    A[API-tilbyder gir SSB tilgang til API via Samarbeidsportalen]\n    A --> B[M2M-teamet hos SSB oppretter Maskinporten-klienter]\n    B --> C[Keycloak-klienter for Maskinporten Guardian opprettes]\n```\n\n\n1) API-tilbyderen må gi SSB tilgang til et _API scope_. API-tilbydere kan gjøre dette via\n[Samarbeidsportalen hos Digdir](https://samarbeid.digdir.no/). Fra API-tilbyderen får du også annen informasjon om API-ene, som:\n\n* URL-er som skal benyttes for å snakke med API-et\n* Navn på API scopes\n* Om det finnes testadata\n* Dokumentasjon for API-endepunktene\n \n2) Når data er delt av en API-tilbyder, og en har navnet på API scopes, kan [M2M-teamet hos SSB](mailto:arild.langseth@ssb.no) kontaktes\nfor å få opprettet _Maskinporten-klienter_, én pr miljø (f. eks `prod` og `test`). De må vite hvilke API scopes og miljøer (test/prod) som skal benyttes.\nM2M-teamet vil gi deg ID-er (f. eks `12345678-9abc-def0-1234-567890abcdef`) for klientene som er blitt opprettet.\n\n::: {.callout-tip appearance=\"simple\"}\nDu kan anse ID for en Maskinporten-klient som et slags brukernavn, og behandle dette deretter. Slike ID-er er ikke sensitive i seg selv,\nmen de bør allikevel ikke ligge i åpne git-repoer (SSB-private repoer er OK). Det er heller ingen grunn til å behandle disse som hemmeligheter.\nDet anbefales at man opererer med Maskinporten-klienter som ekstern konfigurasjon til koden, f. eks på samme måte som man behandler URL-er til API-ene. \n:::\n\n3) Når du har ID for Maskinporten-klienten(e), er neste steg å få opprettet en Keycloak-bruker for Maskinporten Guardian. Se [Opprette en Maskinporten Guardian M2M-bruker].\nTa kontakt med oss på Dapla via [Pureservice](https://ssb.pureservice.com/#/new) dersom du trenger hjelp til dette. _Client ID_ og _client secret_ for Keycloak-brukeren\nkan hentes fra Secret Manager (mer om det lenger ned). Medlemmer av Dapla-teamet har tilgang til å hente disse.\n\nOm noen på teamet trenger personlig tilgang til API-ene så må det konfigureres i Maskinporten Guardian. Da må vi vite hvilke personer som skal ha denne tilgangen. Les mer om forskjellen på M2M og personlig tilgang\n[lenger ned](#hvordan-maskinporten-guardian).\n\n\n## Administrasjon av API-integrasjoner i SSB\n\nDet er M2M-teamet i SSB som administrerer det formelle i forbindelse med integrasjoner mot eksterne API-er.\nFor å få opprettet nye Maskinporten-klienter er det dette teamet man [kontakter](mailto:arild.langseth@ssb.no).\nDe må vite hvilke miljøer (`test` og/eller `prod`) og hvilke API scopes som skal benyttes. Hver Maskinporten-klient som opprettes\nidentifiseres av en ID (f. eks `12345678-9abc-def0-1234-567890abcdef`), som du vil få tilsendt.\n\nLegg merke til at det er SSB selv som oppretter og administrerer Maskinporten-klienter. Det gjøres i [Samarbeidsportalen hos Difi](https://samarbeid.digdir.no/). \nKlientene knyttes til API scope(s) (som er delt med SSB av API-tilbyderen). Du kan lese mer om hvordan M2M-teamet administrerer Maskinporten-klienter\n[her](https://docs.digdir.no/docs/Maskinporten/maskinporten_sjolvbetjening_web.html).\n\n::: {.callout-tip appearance=\"simple\"}\nAlle med en SSB-epostadresse kan [registerere](https://minside-samarbeid.digdir.no/)\nen personlig bruker i [Digdir Samarbeidsportalen](https://samarbeid.digdir.no/) for å få innsyn i hvilke API-integrasjoner som finnes.\n:::\n\n\n## Hvordan bruker jeg Maskinporten Guardian? {#hvordan-maskinporten-guardian}\n\nMaskinporten Guardian er tilgjengelig fra alle SSB og NAIS sine IP-adresser, og kan nås på:\n\n* Prod: `https://guardian.intern.ssb.no`\n* Test: `https://guardian.intern.test.ssb.no`\n\nMaskinporten Guardian sine endepunkter er selv beskyttet av Keycloak. To typer brukere støttes:\n\n* _Maskin-til-maskin (M2M)_ - Systembruker knyttet til en gitt Maskinporten-klient. For å opptre på vegne av en\n   M2M-bruker autentiserer man seg med en _Keycloak client secret_. Denne hemmeligheten er lagret i Google Secret Manager\n   og kun Service Accounts eller Dapla-grupper med tilgang kan hente den ut.\n* _Personlig_ - Din egen SSB-bruker. Man kan f. eks bruke [dapla-toolbelt](https://github.com/statisticsnorway/dapla-toolbelt/blob/main/src/dapla/auth.py#L143)\n  for å hente ut sitt personlige Keycloak-token. I tillegg til å autentisere deg må din bruker være autorisert til å gjøre\n  oppslag på vegne av en Maskinporten-klient. Dette styres i konfigurasjonen til Maskinporten Guardian.\n\n::: {.callout-note appearance=\"simple\"}\nMan skal i hovedsak kun anvende M2M-brukere for datautveksling mot API-er som er beskyttet av Maskinporten. Personlige brukere\nskal kun brukes unntaksvis for enkeltoppslag (f. eks ved feilsøking) mot API-er eller for utvikling og test.\n:::\n\nLegg merke til at Maskinporten Guardian kun er tilgjengelig fra interne SSB-adresser. Bruk følgende URL-er:\n* Prod: `https://guardian.intern.ssb.no`\n* Test: `https://guardian.intern.test.ssb.no`\n\n## Systemskisse\n\nFølgende gir en oversikt over hvordan systemer henger sammen. En API-konsument kan f. eks være et Dapla-team som ønsker å hente data,\nmens en API-tilbyder er en ekstern virksomhet som tilbyr data via Maskinporten. Det er noen forskjeller i flyt avhengig av om\nMaskinporten Guardian aksesseres med systembruker (M2M) eller personlig bruker.\n\n![](../images/maskinporten-guardian-flyt.svg){fig-alt=\"Maskinporten Guardian flyt\" fig-align=\"left\" #fig-maskinporten-flyt}\n\n### Flyt: M2M {#m2m-flow}\n\n1) API-konsumenten henter sin _Keycloak client secret_ for en gitt Maskinporten-klient fra Secret Manager. \n2) API-konsumenten henter et Keycloak sikkerhetstoken ved å bruke _client secret_ fra steg 1.\n3) API-konsumenten henter et Maskinporten sikkerhetstoken fra Maskinporten Guardian ved å bruke Keycloak sikkerhetstoken fra steg 2. En kan alternativt angi\n   andre API scopes enn det som er standard for Maskinporten-klienten, men dette er vanligvis ikke nødvendig.\n4) Maskinporten Guardian bruker SSB sitt virksomhetssertifikat til å signere en forespørsel om å hente et sikkerhetstoken fra Maskinporten (ref steg 3)\n5) API-konsumenten henter data fra den eksterne API-tilbyderen ved å bruke sikkerhetstoken fra Maskinporten.\n\n### Flyt: Personlig bruker {#personal-flow}\n\n::: {.callout-note appearance=\"simple\"}\nSteg 1 og 2 gjelder kun for M2M-brukere. Dersom man aksesserer Maskinporten Guardian med personlig bruker så hentes Keycloak-tokenet f. eks\nved hjelp av AuthClient i dapla-toolbelt.\n:::\n\n3) API-konsumenten henter et Maskinporten sikkerhetstoken fra Maskinporten Guardian ved å bruke sitt personlige Keycloak sikkerhetstoken.\n   Det må angis hvilken Maskinporten-klient og hvilke API scopes Maskinporten sikkerhetstokenet skal gjelde for. Den personlige brukeren\n   må på forhånd være autorisert (ref Maskinporten Guardian sin tilgangskonfigurasjon) til å kunne hente sikkerthetstokens for Maskinporten-klienten.\n4) Maskinporten Guardian bruker SSB sitt virksomhetssertifikat til å signere en forespørsel om å hente et sikkerhetstoken fra Maskinporten (ref steg 3)\n5) API-konsumenten henter data fra den eksterne API-tilbyderen ved å bruke sikkerhetstoken fra Maskinporten.\n\n\n## Opprette en Maskinporten Guardian M2M-bruker\n\n::: {.callout-note}\nDette avsnittet inneholder tekniske instrukser ment for deg som er kjent med Git og som f. eks jobber i et Self-managed Dapla-team. Ta kontakt med oss\nvia [Pureservice](https://ssb.pureservice.com/#/new) så hjelper vi deg gjerne med dette. \n:::\n\nFor å kunne opptre på vegne av Maskinporten-klienten uavhengig av din personlige bruker, må man opprette en Keycloak systembruker. Det gjøres ved å \nåpne en Pull Request (konfigurasjon som gjennomgås av en tekniker) til [keycloak-iac](https://github.com/statisticsnorway/keycloak-iac) der \ndu angir informasjon som ID for Maskinporten-klient, API scopes og hvem som skal ha tilgang. Legg merke til at du må opprette en klient pr miljø\n(test og prod). Du kan se bort fra _play_-miljøet.\n\n### Eksempelkonfigurasjon\n\n```text\namends \".../pkl/MaskinportenGuardianClient.pkl\"\n\napi_shortname = \"Kort API-beskrivelse (maks 32 tegn)\"\nmaskinporten_client_id = \"12345678-9abc-def0-1234-567890abcdef\"\nmaskinporten_audience = \"https://maskinporten.no/\"\nmaskinporten_default_scopes {\n  \"foo:data1\"\n  \"foo:data2\"\n}\ncredentials_access {\n  \"group:play-foeniks-data-admins@groups.ssb.no\"\n  \"serviceaccount:foo-sa@play-foeniks-p-ab.iam.gserviceaccount.com\"\n}\n```\n\n::: {.callout-note}\nI test skal `maskinporten_audience` ha verdien `https://test.maskinporten.no/`.\nI prod skal det være `https://maskinporten.no/` (merk: skråstrek på slutten er viktig)\n:::\n\nPull Requesten må godkjennes og behandles av en Dapla platformutvikler. Når dette er gjort blir det opprettet en Keycloak-klient, og hemmeligheten\nsom kan brukes for å hente ut sikkerhetstokens for denne klienten er tilgjengelig i Secret Manager.\n\nSe følgende dokumentasjon for mer informasjon:\n\n\n* [Detaljert beskrivelse av konfigurasjonsmuligeter](https://github.com/statisticsnorway/keycloak-iac?tab=readme-ov-file#maskinporten-guardian).\n* [Generell beskrivelse av hvordan man oppretter en Keycloak-klient](https://github.com/statisticsnorway/keycloak-iac?tab=readme-ov-file#adding-a-new-keycloak-client)\n* [Keycloak client credentials](https://github.com/statisticsnorway/keycloak-iac?tab=readme-ov-file#client-credentials)\n\nTa kontakt med [Kundeservice](https://ssb.pureservice.com/#/new) hvis du har spørsmål eller trenger ei hand å halde i.\n\n\n## Kodeeksempler\n\nFølgende viser Python kodeeksempler for hvordan man kan hente ut et Maskinporten sikkerhetstoken.\n\n### Flyt: M2M\n\n```python\n\"\"\"\nRetrieve maskinporten M2M access token for querying an external API.\n\nThe following code example expects a toml config file to exist named\n<team_uniform_name>-<env>-maskinporten-m2m.toml (e.g. play-foeniks-prod-maskinporten-m2m.toml)\n\nwith contents such as:\n\nkeycloak_url = \"https://auth.test.ssb.no\"\nkeycloak_clients_gcp_project_id = \"keycloak-clients-<p|t>-??\"\nguardian_url = \"https://guardian.intern.test.ssb.no\"\n\n[my-api]\n    maskinporten_client_id = \"12345678-9abc-def0-1234-567890abcdef\"\n\"\"\"\nimport os\nimport re\nimport requests\nimport toml\n\n\nteam_uniform_name = \"play-foeniks\"\napi_name = \"my-api\" # identifies the API in the config.toml file\n\n# Check which environment we're running and load corresponding config\ndapla_env = os.getenv(\"DAPLA_ENVIRONMENT\").lower()\nconfig = toml.load(f\"{team_uniform_name}-{dapla_env}-maskinporten-m2m.toml\")\n\n# Get Maskinporten Guardian M2M Keycloak client credentials from Google Secret Manager\n# The secret's name is deduced from the team name and maskinporten client id\nname = f\"{team_uniform_name}-ssb-maskinporten-{config[api_name]['maskinporten_client_id']}-credentials\"\nsecret = get_secret_version(project_id=config['keycloak_clients_gcp_project_id'],\n                            shortname=name)\n\n# The credentials are stored as yaml. Here we simply use a regex to parse. \nkeycloak_client_id = re.search(r'\"client_id\": \"(.*)\"', secret).group(1)\nkeycloak_client_secret = re.search(r'\"client_secret\": \"(.*)\"', secret).group(1)\n\n# Get Keycloak access token\n# This token includes custom claims with values such as maskinporten_default_scopes\nresponse = requests.post(f\"{config['keycloak_url']}/realms/ssb/protocol/openid-connect/token\",\n    headers={\n        \"Content-type\": \"application/x-www-form-urlencoded\",\n    },\n    auth=(keycloak_client_id, keycloak_client_secret),\n    data={\"grant_type\": \"client_credentials\"}\n)\nkeycloak_access_token = response.json()['access_token']\n\n# Get Maskinporten access token from Maskinporten Guardian (using the Keycloak token from above)\n# Note that you can specify custom scopes in the request body if you need to. Using defaults defined in the client config if not specified.\nrequest_body={}\nresponse = requests.post(f\"{config['guardian_url']}/maskinporten/access-token\",\n            headers={\n                \"Authorization\": f\"Bearer {keycloak_access_token}\",\n                \"Content-type\": \"application/json\",\n            },\n            json=request_body,\n        )\nmaskinporten_access_token = response.json()['accessToken']\n\n# Then use the maskinporten access token to query the external API...\n```\n\nStøttefunksjon for å hente ut secrets fra Secret Manager\n\n```python\nfrom dapla import AuthClient\nfrom google.cloud import secretmanager\n\ndef get_secret_version(project_id, shortname, version_id='latest'):\n    \"\"\"\n    Access the payload for a given secret version.\n    The user's google credentials are used to authorize that the user have permission\n    to access the secret_id.\n    \n    Args:\n    - project_id (str): ID of the Google Cloud project where the secret is stored.\n    - shortname (str): Name (not full path) of the secret in Secret Manager.\n    - version_id (str, optional): The version of the secret to access. Defaults to 'latest'.\n\n    Returns:\n    - str: The payload of the secret version as a UTF-8 decoded string.\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=AuthClient.fetch_google_credentials())\n    secret_name = f\"projects/{project_id}/secrets/{shortname}/versions/{version_id}\"\n    response = client.access_secret_version(name=secret_name)\n    return response.payload.data.decode(\"UTF-8\")\n```\n\n### Flyt: Personlig bruker\n\n```python\n\"\"\"\nRetrieve maskinporten personal access token for querying an external API.\n\nThe following code example expects a toml config file to exist named\n<team_uniform_name>-<env>-maskinporten-pers.toml (e.g. play-foeniks-prod-maskinporten-pers.toml)\n\nwith contents such as:\n\nguardian_url = \"https://guardian.intern.test.ssb.no\"\n\n[my-api]\n    maskinporten_client_id = \"12345678-9abc-def0-1234-567890abcdef\"\n    scopes = [\"some:scope1\", \"some:scope2\"]\n\"\"\"\nimport os\nimport requests\nimport toml\nfrom dapla import AuthClient\n\nteam_uniform_name = \"play-foeniks\"\napi_name = \"my-api\" # identifies the API in the config.toml file\n\n# Check which environment we're running and load corresponding config\ndapla_env = os.getenv(\"DAPLA_ENVIRONMENT\").lower()\nconfig = toml.load(f\"{team_uniform_name}-{dapla_env}-maskinporten-pers.toml\")\n\n# Get Keycloak access token\nkeycloak_access_token = AuthClient.fetch_personal_token()\n\n# Get Maskinporten access token from Maskinporten Guardian (using the personal Keycloak token from above)\nrequest_body = {\n  \"maskinportenClientId\": config[api_name]['maskinporten_client_id'],\n  \"scopes\": config[api_name]['scopes']\n}\nresponse = requests.post(f\"{config['guardian_url']}/maskinporten/access-token\",\n            headers={\n                \"Authorization\": f\"Bearer {keycloak_access_token}\",\n                \"Content-type\": \"application/json\",\n            },\n            json=request_body\n        )\n\nmaskinporten_access_token = response.json()['accessToken']\n\n# Finally, use the maskinporten access token to query the external API\nprint(maskinporten_access_token)\n```\n\n",
    "supporting": [
      "maskinporten-guardian_files"
    ],
    "filters": [],
    "includes": {}
  }
}