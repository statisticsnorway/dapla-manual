{
  "hash": "65266a3bff08f45b3fe7abd64fcc38a2",
  "result": {
    "markdown": "---\nfreeze: true\ntitle: Kildomaten\n---\n\n\n\n\n\n*Kildomaten* er tjeneste som er tilgjenglig for alle Dapla-team. Den lar **data-admins** automatisere prosesseringen av **kildedata** til **inndata**. Det skjer ved brukeren skriver et python-skript som skal prosessere alle filer som kommer inn i en gitt mappe i kildedata-bøtta. Brukeren bestemmer selv hvilken mappe tjenesten skal trigge på.\n\nProsessering som skal skje i overgangen fra kildedata til inndata har SSB definert som:\n\n- **Dataminimering**:  \nFjerne alle felter som ikke er strengt nødvendig for å produsere statistikk.\n- **Pseudonymisering**:  \nPseudonymisering av personidentifiserende data.\n- **Kodeverk**:  \nLegge på standard kodeverk fra for eksempel [Klass](https://www.ssb.no/klass/).  \n- **Standardisering**:  \nTegnsett, datoformat, etc. endres til SSBs standardformat.\n\n## Forberedelser\n\nFør et Dapla-team kan ta i bruk *Kildomaten* må man koble teamets GitHub-IaC-repo til kildeprosjektet [slik som beskrevet her](./github-app-integrasjon.html). Det er en engangsjobb som må gjøre av teamets **data-admin**.\n\n## Sette opp tjenesten\n\nI denne delen bryter vi ned prosessen med å sette *kildomaten* i de stegene vi mener det er hensiktsmessig å gjøre det når den settes opp for første gang.\n\n### Forbered IaC-repoet\n\nFor å sette opp tjenesten for en kilde må teamet legge inn to filer i teamets IaC-repo^[*Infrastructure-as-Code (IaC)*-repoet til hvert Dapla-team holder koden som ruller ut ressursene til teamet på SSB sin GCP-organisasjon. Les mer om IaC-repoer her.].:\n\n1. Et python-skript prosesserer filene.\n\n2. En konfigurasjonsfil som angir hvilken mappe skriptet skal trigges på. \n\nMan finner teamets IaC-repo ved gå inn på [SSBs GitHub-organisasjon](https://github.com/statisticsnorway) og søke etter repoet som heter `<teamnavn>-iac`. Det gjøres på følgende måte:\n\n1. Klon ned ditt teams Iac-repo.\n2. Opprett en ny branch som f.eks. heter `add-source`.\n\n::: {.grid}\n\n::: {.g-col-4}\n3. Opprett en mappe som heter `automation` i rotmappen til IaC-repoet, med tilhørende undermapper slik som vist i mappestrukren til høyre.\n\n:::\n\n::: {.g-col-8}\n\n```{.yaml filename=\"github.com/statisticsnorway/dapla-example-iac\"}\ndapla-example-iac\n├── automation\n│   └── source_data\n│       ├── prod\n│       │   \n│       └── test\n│           \n```\n\n:::\n\n:::\n\n\n\nSom vist i mappestrukturen over så kan man sette opp *kildomaten* i både test- og prod-miljøet på Dapla. I de neste stegene så følger du instruksene for det miljøet du ønsker å sette opp tjenesten for. I eksemplet under setter vi det opp for prod-miljøet, og derfor opererer vi `automation/source_data/prod/`-mappen. \n\n4. \n\n\n\n## Vedlikehold\n\ndkjfkl\n\n\n\n\n",
    "supporting": [
      "kildomaten_files"
    ],
    "filters": [],
    "includes": {}
  }
}