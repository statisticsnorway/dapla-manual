{
  "hash": "fb47e1b5b4e96ec62763c74f31c244d0",
  "result": {
    "markdown": "---\ntitle: Dash og dashboard\nfreeze: true\nexecute:\n    echo: false\n    include: true\n\n---\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nSist endret: 2024-10-08 av Jonathan7SSB\n```\n:::\n:::\n\n\nHvis en ønsker å lage ett dashbord som et brukergrensesnitt, så kan pakken Dash være et godt alternativ. Dash er ett rammeverk hvor man selv kan bygge opp applikasjoner i form av dashbord på en enklere måte, og det bygges oppå javascript pakker som plotly.js og react.js. Det er et produkt ved siden av og helintegrert med plotly, som også er en annen pakke i Python som gir oss interaktive grafer. Dash er et godt verktøy hvis en ønsker et dashbord som brukergrensesnitt for interaktiv visualisering av data. Dash kan kodes i Python og R, men også Julia og F#.\n\nI SSB kan man lage dashbord i virtuelle miljøer satt opp med [ssb-project](./jobbe-med-kode.qmd). \nFor mer om håndtering av pakker i ett virtuelt miljø satt opp med ssb-project kan man se nærmere [her](./jobbe-med-kode.qmd#installere-pakker).\n\n## Eksempel kode i DaplaLab\n\nI DaplaLab kan du starte opp ett dashbord ved hjelp av dash pakken enten i vscode-python tjenesten, eller i en notebook i jupyter tjenesten. Det fungerer best å kjøre Dash-apper i en egen fane i nettleseren.\n\n::: {.panel-tabset}\n\n### vscode-python script\n\nHer er et eksempel på hvordan man lager en Dash-app i DaplaLab i en vscode tjeneste:\n\n1. Installer `pandas` og `dash` i et [ssb-project](./jobbe-med-kode.qmd#ssb-project). \n2. Opprett et python-script i prosjektet som f.eks. heter `app.py`. \n3. Kjør scriptet ved å kjøre følgende kommando fra terminalen: `poetry run python ./app.py`\n4. Deretter kommer det opp et dialog-vinduet hvor du velger `Open in browser`. \n\nHer er et eksempel på script som fungerer i Vscode-python:\n\n```{.python filename=\"app.py\"}\nfrom dash import Dash, html, dcc, callback, Output, Input\nimport plotly.express as px\nimport pandas as pd\n\n# Creating a sample dataset similar to the Gapminder dataset\ndata = {\n    'country': ['Afghanistan', 'Afghanistan', 'Afghanistan', 'Brazil', 'Brazil', 'Brazil', 'China', 'China', 'China'],\n    'continent': ['Asia', 'Asia', 'Asia', 'South America', 'South America', 'South America', 'Asia', 'Asia', 'Asia'],\n    'year': [1952, 1977, 2007, 1952, 1977, 2007, 1952, 1977, 2007],\n    'lifeExp': [28.801, 39.877, 43.828, 50.917, 59.504, 72.390, 44.000, 63.739, 72.961],\n    'pop': [8425333, 12412311, 31889923, 56602560, 80461570, 190010647, 556263527, 862030000, 1318683096],\n    'gdpPercap': [779.4453145, 786.11336, 974.5803384, 2108.944355, 5718.766744, 9065.800825, 400.448611, 1488.041713, 4959.114854]\n}\n\n# Creating DataFrame\ndf = pd.DataFrame(data)\n\n# Creating the app\nport = 8050 # must be between 1024 and 9999, default is 8050\napp = Dash(\n    __name__,\n    requests_pathname_prefix=f'/proxy/{port}/', \n    serve_locally=True\n)\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.Dropdown(df.country.unique(), 'Canada', id='dropdown-selection'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(\n    Output('graph-content', 'figure'),\n    Input('dropdown-selection', 'value')\n)\ndef update_graph(value):\n    dff = df[df.country==value]\n    return px.line(dff, x='year', y='pop')\n\nif __name__ == '__main__':\n    app.run(port=port, debug=True)\n```\n\nFor å stoppe dashbordet fra å kjøre, trykker du i terminalen `ctrl` + `c`.\n\n### jupyter notebook\n\nHer er et eksempel på hvordan man lager en Dash-app i DaplaLab i en jupyter tjeneste:\n\n1. Installer `pandas` og `dash` i et [ssb-project](./statistikkere/jobbe-med-kode.qmd#ssb-project). \n2. Opprett en notebook i prosjektet som f.eks. heter `app.ipynb`.\n3. Åpne notebooken og kjør kodecellene på vanlig måte.\n\nHer er et eksempel på kode i notebook som fungerer i jupyter:\n\n```{.python filename=\"app.ipynb\"}\n# %%\n# Notebook cell 1\nfrom dash import Dash, html, dcc, callback, Output, Input\nimport plotly.express as px\nimport pandas as pd\nimport os\n\n# %%\n# Notebook cell 2\n# Creating a sample dataset similar to the Gapminder dataset\ndata = {\n    'country': ['Afghanistan', 'Afghanistan', 'Afghanistan', 'Brazil', 'Brazil', 'Brazil', 'China', 'China', 'China'],\n    'continent': ['Asia', 'Asia', 'Asia', 'South America', 'South America', 'South America', 'Asia', 'Asia', 'Asia'],\n    'year': [1952, 1977, 2007, 1952, 1977, 2007, 1952, 1977, 2007],\n    'lifeExp': [28.801, 39.877, 43.828, 50.917, 59.504, 72.390, 44.000, 63.739, 72.961],\n    'pop': [8425333, 12412311, 31889923, 56602560, 80461570, 190010647, 556263527, 862030000, 1318683096],\n    'gdpPercap': [779.4453145, 786.11336, 974.5803384, 2108.944355, 5718.766744, 9065.800825, 400.448611, 1488.041713, 4959.114854]\n}\n\n# Creating DataFrame\ndf = pd.DataFrame(data)\n\n# Creating the app\nport = 8050 # must be between 1024 and 9999\nservice_prefix = os.getenv('JUPYTERHUB_SERVICE_PREFIX', '/')\ndomain = os.getenv('JUPYTERHUB_HTTP_REFERER', None)\n\napp = Dash(\n    __name__,\n    requests_pathname_prefix=f\"{service_prefix}proxy/{port}/\", \n    serve_locally=True\n)\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.Dropdown(df.country.unique(), 'Canada', id='dropdown-selection'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(\n    Output('graph-content', 'figure'),\n    Input('dropdown-selection', 'value')\n)\ndef update_graph(value):\n    dff = df[df.country==value]\n    return px.line(dff, x='year', y='pop')\n\nif __name__ == '__main__':\n    # For jupyter_mode, choose between 'external' or 'inline'.\n    # 'jupyterlab' should also be poosible, but doesn't seem to work...\n    app.run(debug=True, jupyter_mode=\"external\", jupyter_server_url=domain, port=port)\n```\n\nFor å stoppe dashbordet fra å kjøre, restarter du kernelen i jupyterlab: `Kernel` -> `Restart Kernel and Clear Outputs of All Cells...`\n\n### jupyter script\n\nHer er et eksempel på hvordan man lager en Dash-app i DaplaLab i en jupyter tjeneste:\n\n1. Installer `pandas` og `dash` i et [ssb-project](./statistikkere/jobbe-med-kode.qmd#ssb-project). \n2. Opprett et python-script i prosjektet som f.eks. heter `app.py`. \n3. Kjør scriptet ved å kjøre følgende kommando fra terminalen: `poetry run python app.py`\n4. Deretter dukker det opp en link i terminalen etter teksten 'Dash is running on' som du kan trykke på for å få opp dashbordet. \n\nHer er et eksempel på script som fungerer i jupyter:\n\n```{.python filename=\"app.py\"}\nfrom dash import Dash, html, dcc, callback, Output, Input\nimport plotly.express as px\nimport pandas as pd\nimport os\n\n# Creating a sample dataset similar to the Gapminder dataset\ndata = {\n    'country': ['Afghanistan', 'Afghanistan', 'Afghanistan', 'Brazil', 'Brazil', 'Brazil', 'China', 'China', 'China'],\n    'continent': ['Asia', 'Asia', 'Asia', 'South America', 'South America', 'South America', 'Asia', 'Asia', 'Asia'],\n    'year': [1952, 1977, 2007, 1952, 1977, 2007, 1952, 1977, 2007],\n    'lifeExp': [28.801, 39.877, 43.828, 50.917, 59.504, 72.390, 44.000, 63.739, 72.961],\n    'pop': [8425333, 12412311, 31889923, 56602560, 80461570, 190010647, 556263527, 862030000, 1318683096],\n    'gdpPercap': [779.4453145, 786.11336, 974.5803384, 2108.944355, 5718.766744, 9065.800825, 400.448611, 1488.041713, 4959.114854]\n}\n\n# Creating DataFrame\ndf = pd.DataFrame(data)\n\n# Creating the app\nport = 8050 # must be between 1024 and 9999, default is 8050\nservice_prefix = os.getenv('JUPYTERHUB_SERVICE_PREFIX', '/')\ndomain = os.getenv('JUPYTERHUB_HTTP_REFERER', None)\nservice = f\"{service_prefix}proxy/{port}/\"\nurl = f\"{domain}{service[1:]}\"\ndefault_host = f\"http://127.0.0.1:{port}{service}\"\n\napp = Dash(\n    __name__,\n    requests_pathname_prefix=service,\n    serve_locally=True\n)\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.Dropdown(df.country.unique(), 'Canada', id='dropdown-selection'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(\n    Output('graph-content', 'figure'),\n    Input('dropdown-selection', 'value')\n)\ndef update_graph(value):\n    dff = df[df.country==value]\n    return px.line(dff, x='year', y='pop')\n\nif __name__ == '__main__':\n    app.run(proxy = default_host + \"::\" + url, port=port, debug=True)\n```\n\nFor å stoppe dashbordet fra å kjøre, trykker du i terminalen `ctrl` + `c`.\n\n:::\n\n## Aktuell dokumentasjon\n\nDiverse som er verdt å se nærmere på når en bygger dashbord applikasjon med Dash. Det følger med mange gode eksempler for bruk av diverse komponenter i dokumentasjonene under her.\n\n- Startsiden til [Dash](https://dash.plotly.com/?_gl=1*1pt5jva*_ga*MTcxNzc5OTEzNC4xNjQ5NjU4MjA3*_ga_6G7EE0JNSC*MTY3ODI1NjMzOC42NS4xLjE2NzgyNTYzNjYuMC4wLjA.)\n- Lage interaktive grafer i Python med [Plotly](https://plotly.com/python/)\n- [Dash Core Components](https://dash.plotly.com/dash-core-components)\n- [Dash HTML Components](https://dash.plotly.com/dash-html-components)\n- [Dash Bootstrap Components](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/)\n    - Vel og merke henter denne diverse materialer fra internett, og vil ikke fungere uten tilgang. Det er heller anbefalt å ha de nødvendige filene lagret lokalt for bruk av denne pakken.\n    - Pakken i seg selv har en fordel i at det er lettere å bygge opp utseende(layout) i dashbordet ditt, samt andre komponenter som ikke ligger i standard dash pakken.\n- [Dash SSB Components](https://github.com/statisticsnorway/ssb-dash-components)\n    - Team Metadata lager SSB komponenter i Dash, noe Datadoc er lagd med. Dette gir deg muligheten til å bruke SSB komponentene i dine egne dashbord. Vel og merke er denne pakken fortsatt under utvikling, og ikke alle komponenter er på plass.\n\n",
    "supporting": [
      "dashboard_files"
    ],
    "filters": [],
    "includes": {}
  }
}