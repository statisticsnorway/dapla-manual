{
  "hash": "cb32dc5eaec0bc3d6618132ca66d56ac",
  "result": {
    "markdown": "---\ntitle: Jobbe med data\nfreeze: true\nexecute:\n    echo: false\n    include: true\n---\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nSist endret: 2024-06-08 av Øyvind Bruer-Skarsbø\n```\n:::\n:::\n\n\nNår man oppretter et **dapla-team** så får vi tildelt et eget området for lagring av data. For å kunne lese og skrive data fra Jupyter til disse områdene må vi autentisere oss, siden Jupyter og lagringsområdet er to separate sikkerhetsoner. \n\n@fig-storage viser dette klarer skillet mellom hvor vi koder og hvor dataene ligger på Dapla^[I de tidligere systemene på bakken så var det ikke nødvendig med autentisering mellom kodemiljø og datalagringen]. I dette kapitlet beskriver vi nærmere hvordan du kan jobbe med dataene dine på Dapla. \n\n![Tydelig skille mellom kodemiljø og datalagring på Dapla.](../images/data-storage-image.png){ fig-alt=\"Bilde som viser forskjellen mellom kodemiljø og hvor data lagres.\" #fig-storage }\n\n## SSB-biblioteker\n\nFor å gjøre det enklere å jobbe data på tvers av Jupyter og lagringsområdet er det laget noen egne SSB-utviklede biblioteker for å gjøre vanlige operasjoner mot lagringsområdet. Siden både R og Python skal brukes på Dapla, så er det laget to biblioteker, en for hver av disse språkene. [fellesr](https://statisticsnorway.github.io/fellesr/articles/vignette__DAPLA_jukseark.html) er biblioteket for R, og [dapla-toolbelt](https://github.com/statisticsnorway/dapla-toolbelt) er biblioteket for Python.\n\n### dapla-toolbelt\n\n[dapla-toolbelt](https://github.com/statisticsnorway/dapla-toolbelt) er en en pakke som lar deg enkelt lese og skrive til lagringsområdet uten å måtte autentifisere deg manuelt. Den har en **Pandas**-aktig syntaks som forhåpentlig er gjenkjennbar for de fleste. Pakken er installert i alle Python-kernels på Dapla, så du trenger ikke å installere den selv hvis du åpner en notebook med Python3 for eksempel. For å importere hele biblioteket i en notebook skriver du bare\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\n```\n\n**dapla-toolbelt** bruker en pakke som heter **gcsfs** for å kommunisere med lagringsområdet. **gcsfs** er en pakke som lar deg bruke Google Cloud Storage (GCS) som om det var en filsystem. Det betyr at du kan bruke samme syntaks som du bruker for å lese og skrive til filer på din egen maskin. Du kan lese mulighetene i gcsfs [her](https://gcsfs.readthedocs.io/en/latest/api.html). Et eksempel på hvordan de to pakkene kan brukes sammen ser du her:\n\n```{.python filename=\"notebook\"}\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n# Example of how you can use gcsfs and dapla-toolbelt together\nfs.touch(\"gs://my-bucket/my-folder/\")\n```\nI koden over brukte jeg kommandoen `touch` fra [gcsfs](https://gcsfs.readthedocs.io/en/latest/api.html) og `FileClient` fra dapla-toolbelt for å opprette en mappe i lagringsområdet.\n\nI kapitlene under finner du konkrete eksempler på hvordan du kan bruke **dapla-toolbelt** til å jobbe med data i SSBs lagringsområdet.\n\n### fellesr\n\nR-pakken [fellesr](https://statisticsnorway.github.io/fellesr/articles/vignette__DAPLA_jukseark.html) er under utvikling og gir mye av den samme funksjonaliteten som **dapla-toolbelt** gir for Python. I tillegg til å kunne lese og skrive til lagringsområdet på Dapla, så har **fellesr** også funksjoner for å jobbe med metadata på Dapla.\n\n**fellesr** er installert på Dapla og funksjoner kan benyttes ved: \n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n```\nHvis du benytte en renv miljø, må pakken installeres en gang. Dette kan gjøres ved:\n\n```{.r filename=\"notebook\"}\nrenv::install(\"statisticsnorway/fellesr\")\n```\n\n## Vanlige operasjoner\n\nI denne delen viser vi hvordan man gjør veldig vanlige operasjoner når man koder et produksonsløp for en statistikk. Flere eksempler på nyttige systemkommandoer [finner du her](./hva-er-botter.qmd#systemkommandoer-mot-bøttter).\n\n### Liste ut innhold i mappe\n\n::: {.callout-tip}\n## Eksempeldata i Dapla Felles\n\nDapla Felles er et team der alle i SSB er med i *developers*-gruppa. Dvs. at alle har lese- og skrivetilgang til følgende områder:  \n**gs://ssb-dapla-felles-data-produkt-prod/** i prod-miljøet på Dapla, og  \n**gs://ssb-dapla-felles-data-produkt-test/** i test-miljøet. Eksemplene under bruker førstnevnte i koden, slik at alle kan kjøre koden selv. \n\nKode-eksemplene finnes for både R og Python, og du kan velge hvilken du skal se ved å trykke på den arkfanen du er interessert i.\n:::\n\nÅ liste ut innhold i et gitt mappe på Dapla er ganske enkelt. Under ser du hvordan du kan liste ut innholdet i følgende mappe:\n\n`gs://ssb-dapla-felles-data-produkt-prod/datadoc/brukertest/10/sykefratot/klargjorte_data`\n\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\nVi bruker modulen `FileClient` fra **dapla-toolbelt** for å liste ut innholdet i en mappe.\n\n```{.python filename=\"notebook\"}\nfrom dapla import FileClient\n\n# Set path to folder\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/datadoc/brukertest/10/sykefratot/klargjorte_data\"\n\nFileClient.ls(file_path)\n```\n\nMed kommandoen over får du listet ut alle filnavn i mappen. Hvis du vil ha mer informasjon om filene så kan du bruke `ls`-kommandoen med `detail = True`, som under:\n\n```{.python filename=\"notebook\"}\nFileClient.ls(file_path, detail = True)\n```\n\nSyntaksen med `ls` er veldig lik det man kjenner fra en Linux-terminal. Men når vi bruker `detail = True` blir metadata om filene returnert som en Python-liste med dictionaries. Det kan være svært nyttig når du f.eks. trenger å vite dato og tidspunkt for når en fil ble opprettet, eller når den sist ble oppdatert.\n\n## {{< fa brands r-project >}}\n\n```{.r filename=\"notebook\"}\n# Loading functions into notebook\nlibrary(fellesr)\n\n# Path to folder\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/datadoc/brukertest/10/sykefratot/klargjorte_data\"\n\n# List files in folder \nlist.files(file_path)\n```\nMerknad: Når du spesifisere bøtter i R, trenger du ikke \"gs://\" foran. \n\n:::\n \n\n### Skrive ut filer\n\nÅ skrive filer til et lagringsområde på Dapla er også ganske enkelt. Det ligner mye på den syntaksen vi er kjent med fra vanlige R- og Python-pakker, med noen små unntak.\n\n#### Parquet\n\nUnder lager vi en dataframe i en notebook og skriver den ut til en parquet-fil.\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\nNår vi leser en Parquet-fil med **dapla-toolbelt** så bruker den [pyarrow](https://arrow.apache.org/docs/python/index.html) i bakgrunnen. Dette er en av de raskeste måtene å lese og skrive Parquet-filer på.\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\nimport pandas as pd\nimport numpy as np\n\n# Set path to folder\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples\"\n\n# Create pandas dataframe\npurchases = pd.DataFrame(np.random.randn(10, 5),\n                        columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\n# Write pandas dataframe as parquet to GCS bucket\ndp.write_pandas(df = purchases,\n                gcs_path = f\"{file_path}/data.parquet\",\n                file_format = \"parquet\",)\n```\nNår vi kalte `write_pandas` over så spesifiserte vi at filformatet skulle være `parquet`. Dette er default, så vi kunne også ha skrevet det slik:\n\n```{.python filename=\"notebook\"}\ndp.write_pandas(df = purchases,\n                gcs_path = f\"{file_path}/data.parquet\")\n```\nMen for de andre filformatene må vi altså spesifisere dette.\n\n## {{< fa brands r-project >}}\n\nNår vi jobber med Parquet-fil i R, bruker vi pakken [arrow](https://arrow.apache.org/docs/r/). Dette er en del av [fellesr](https://statisticsnorway.github.io/fellesr/) pakken så du trenger kun å kalle inn dette. Pakken inneholder funksjonen `write_SSB` som kan brukes til å skrive data til bøtte på Dapla.\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\n# Set stien til hvor data skal lagres\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples\"\n\n# Lage en eksempel dataframe\npurchases = data.frame(A = runif(10), B= runif(10), C=runif(10))\n\n# Skrive data til bøttet som en parquet\nwrite_SSB(purchases, file.path(file_path, \"purchases.parquet\"))\n```\nMerknad: Når du spesifisere bøtter i R, trenger du ikke \"gs://\" foran. \n\n:::\n\n\n\n#### Tekstfiler\n\nNoen ganger ønsker vi å lagre data i andre formatter slik som CSV, JSON og XML. \n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\ndapla-toolbelt kan skrive ut json, csv og posisjonsfiler (fixed-width-files/fwf) til lagringsområdet. Måten den gjør det på er å bruke Pandas sine funksjoner `read_json`, `read_csv`, `read_fwf` under panseret. Dette kan være nyttig å vite for skjønne hvordan dapla-toolbelt håndterer ulike strukturer i (spesielt hierarkiske) tekstfiler. Under ser du hvordan du kan skrive ut en dataframe til en json-fil.\n\n```{.python filename=\"notebook\"}\nimport numpy as np\nimport pandas as pd\nfrom dapla import FileClient\n\n# Set path to folder\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples\"\n\n# Create a dataframe with Pandas\ndf = pd.DataFrame(np.random.randn(10, 5), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\n# Save dataframe as json with dapla-toolbelt\ndp.write_pandas(df = df,\n                gcs_path = f\"{file_path}/test.json\",\n                file_format = \"json\")\n```\t\n\nSom vi ser at syntaksen over så kunne vi skrevet ut til noe annet enn json ved å endre verdien i argumentet `file_format`.\n\n## {{< fa brands r-project >}}\n\nPakken [fellesr](https://statisticsnorway.github.io/fellesr/) kan også brukes til å skrive andre type filer, for eksempel csv, til bøtter. Dette gjøres med funksjonen `write_SSB` og spesifisere ønsket filtype i filnavn.\n\nFørst kaller vi biblioteket og lage noe test data ved:\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\n# Set stien til hvor data skal lagres\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples\"\n\n# Lage en eksempel dataframe\npurchases = data.frame(A = runif(10), B= runif(10), C=runif(10))\n\n# Skrive til csv\nwrite_SSB(purchases, file.path(file_path, \"purchases.csv\")\n```\n\n:::\n\n#### xlsx\n\nDet er ikke anbefalt å bruke xlsx-formatet, men her ser du hvordan det kan skrives ut. Mer kommer. \n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\nimport pandas as pd\nfrom dapla import AuthClient\n\n# Henter token for å kunne lese fra Dapla\ntoken = AuthClient.fetch_google_credentials()\n\n# Filsti\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples\"\n\ndf.to_excel(f\"{file_path}/test.xlsx\",\n           storage_options={\"token\": token})\n```\n\n## {{< fa brands r-project >}}\n\nKommer snart\n\n:::\n\n\n\n### Lese inn filer\n\nUnder finner du eksempler på hvordan du kan lese inn data til en Jupyter Notebooks på Dapla.\n\n#### Parquet\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\n\n# Set path to folder\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/datadoc/brukertest/10/sykefratot/klargjorte_data/person_testdata_p2021_v1.parquet\"\n\n# Read path into pandas dataframe \ndp.read_pandas(gcs_path= file_path,\n               file_format = \"parquet\",\n               columns = None,)\n```\n\nSom vi så med `write_pandas` så er `file_format` default satt til `parquet`, og default for `columns = None`, så vi kunne også ha skrevet det slik:\n\n```python\ndp.read_pandas(gcs_path= file_path)\n```\n`columns`-argumentet er en liste med kolonnenavn som vi ønsker å lese inn. Hvis vi ikke spesifiserer noen kolonner så vil alle kolonnene leses inn.\n\n## {{< fa brands r-project >}}\nPakken [fellesr](https://statisticsnorway.github.io/fellesr/index.html) kan brukes til å lese inn data. Funksjonen `read_SSB()` kan lese inn filer i flere format inkluderende parquet. \n\nHer er et eksempel av å lese inn parquet fil \"1987\".\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/datadoc/brukertest/10/sykefratot/klargjorte_data/person_testdata_p2021_v1.parquet\"\n\ndt_1987 <- read_SSB(file.path(file_path))\n```\n\nVi kan også filtrere hvilke variabel vi ønsker å lese inn ved å spesifisere parameter `col_select`. For eksempel:\n\n```r\ndt_1987 <- read_SSB(file.path(file_path),\n                    col_select = c(\"fnr\", \"sivilstand\"))\n\n```\n\nInnlesning av parquet som er kartdata finner du her: [Lese kartdata](https://statisticsnorway.github.io/fellesr/articles/vignette__DAPLA_jukseark.html#lese-inn-kartdata-lagret-som--parquet-filer)\n\n\n:::\n\n#### Tekstfiler\n\nKommer mer snart. Python-koden under bygger på eksempelet over. \n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\n\n# Path to write to\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/test.json\"\n\n# Read in json-file from dapla-storage\ndf = dp.read_pandas(gcs_path = file_path,\n               file_format = \"json\")\n```\n\n\n## {{< fa brands r-project >}}\n\nFunksjonen `read_SSB()` kan lese inn flere type av fil-format, slik som csv og json. Du trenger ikke å endre koden, kun spesifisere hele filnavn.  \n\nFørst kaller vi inn biblioteket [fellesr](https://statisticsnorway.github.io/fellesr/index.html) og spesifisere bøtte/mappen:\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\n# Filsti\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/purchases.csv\"\n\n# Lese inn CSV-fil\ndt_1987 <- read_SSB(file.path(file_path))\n\n```\n\nFor å lese inn en json-fil kan skrive følgende:\n\n```{.r filename=\"notebook\"}\ndt_1987 <- read_SSB(file.path(\"ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/test.json\"))\n```\n\n:::\n\n#### xlsx\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\nimport pandas as pd\nfrom dapla import AuthClient\n\n# Hent token\ntoken = AuthClient.fetch_google_credentials()\n\n# Les inn fil\ndf = pd.read_excel(\"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/test.xlsx\",\n    storage_options={\"token\": token})\n\n```\n\n## {{< fa brands r-project >}}\n\nKommer snart\n\n:::\n\n#### SAS\n\nHer er et eksempel på hvordan man leser inn en sas7bdat-fil på Dapla som har blitt generert i prodsonen. \n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\n\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/statbank_ledstill.sas7bdat\"\n\ndp.read_pandas(file_path, file_format=\"sas7bdat\", encoding=\"latin1\")\n```\n\n## {{< fa brands r-project >}}\n\nSiden innlesing av sas7bdat-filer ikke er støttet i [fellesr](https://statisticsnorway.github.io/ssb-fellesr/articles/vignette__DAPLA_jukseark.html), så kan vi bruke R-pakken reticulate for å benytte oss av funksjonaliteten i Python-pakken dapla-toolbelt. \n\n```{.r filename=\"notebook\"}\nlibrary(reticulate)\ndp <- import(\"dapla\")\nfile_path = \"gs://ssb-dapla-felles-data-produkt-prod/dapla-manual-examples/statbank_ledstill.sas7bdat\"\ndp$read_pandas(file_path, file_format=\"sas7bdat\", encoding=\"latin1\")\n```\n\n:::\n\n### Slette filer\n\nÅ slette filer fra lagringsområdet kan gjøres på flere måter. I kapitlet om [sletting av data](./slette-data.html) viste vi hvordan man gjør det med pek-og-klikk i [Google Cloud Console](https://console.cloud.google.com/). Under ser du hvordan du kan slette filer med **dapla-toolbelt** og **gcsfs** eller [fellesr](https://statisticsnorway.github.io/fellesr/index.html). \n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\t\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n# Skriv inn full filsti til filen som skal slettes\nfile_path = \"\"\n\nfs.rm(file_path)\n\n```\n\n## {{< fa brands r-project >}}\nFunksjonen `gc_delete_object` kan brukes til å slette data på lagringsområdet.\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\n# Skriv inn full filsti til filen som skal slettes\nfile_path = \"\"\n\ngcs_delete_object(file.path(file_path))\n```\n\n:::\n\n### Kopiere filer\n\nÅ kopiere filer mellom mapper på et Linux-filsystem innebærer som regel bruke `cp`-kommandoen. På Dapla er det ikke så mye forskjell. Vi bruker en ligende tilnærming nå vi skal kopiere mellom bøtter eller mapper på lagringsområdet til SSB. Under ser du hvordan du kan kopiere en fil fra en mappe til en annen.\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\nLa oss begynne med et eksempel der vi kopierer en fil fra en mappe til en annen i samme bøtte.\n\n```{.python filename=\"notebook\"}\t\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n# Path to folders\nbucket = \"gs://ssb-dapla-felles-data-produkt-prod\"\nfrom_folder = \"felles/veiledning/python/eksempler/purchases\"\nto_folder = \"felles/veiledning/python/eksempler\"\n\n# Copy file\nfs.cp(f\"{bucket}/{from_folder}/data.parquet\",\n      f\"{bucket}/{to_folder}/data_copy.parquet\")\n\n```\nDet fungerer også for å kopiere filer mellom bøtter. \n\nEt annet scenario vi ofte vil støte på er at vi ønsker å kopiere en fil fra vårt Jupyter-filsystem til en mappe på lagringsområdet. Her kan vi bruke `fs.put`-metoden. \n\n```{.python filename=\"notebook\"}\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n# Create a new file in your home directory called test.txt\nwith open('/home/jovyan/test.txt', 'w') as f:\n    f.write('Create a new text file!')\n\n#Path to folder\nbucket = \"gs://ssb-dapla-felles-data-produkt-prod\"\nfolder = \"felles/veiledning/python/eksempler\"\n\n# Copy file from local to remote file system\nfs.put(lpath=f\"/home/jovyan/test.txt\", rpath=f\"{bucket}/{folder}/test.txt\")\n\n```\nØnsker vi å kopiere en hel mappe fra lagringsområdet til Jupyter-filsystemet, kan vi bruke `fs.get`-metoden, med opsjonen `recursive=True.` \n\n```{.python filename=\"notebook\"}\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n# Copy file\nfs.get(<from_bucket>,\n      \"/home/jovyan/sesongjustering/\",\n      recursive=True)\n\n```\n\n## {{< fa brands r-project >}}\n\nKommer snart\n\n:::\n\n### Flytte filer\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\t\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\nbucket = \"gs://ssb-dapla-felles-data-produkt-prod\"\nfrom_folder = \"felles/veiledning/python/eksempler/purchases\"\nto_folder = \"felles/veiledning/python/eksempler\"\n\nfs.mv(f\"{bucket}/{from_folder}/data.parquet\", f\"{bucket}/{to_folder}/data.parquet\")\n\n```\n\n## {{< fa brands r-project >}}\n\nKommer snart\n\n:::\n\n### Opprette mapper\n\nSelv om bøtter ikke har mapper med en hierarkisk struktur slik man er kjent med fra klassike filsystemer, så kan man opprette det som ser ut som mapper i objektnavnet. I realiteten blir bare `/` oppfattet som en del av navnet på objektet. Skulle du likevel ønske å opprette dette så kan du gjøre det følgende måte:\n\n::: {.panel-tabset}\n\n## Python {{< fa brands python >}}\n\n```{.python filename=\"notebook\"}\nfrom dapla import FileClient\nfs = FileClient.get_gcs_file_system()\n\n#Path to folder\nbucket = \"gs://ssb-dapla-felles-data-produkt-prod\"\nfolder = \"felles/veiledning/python/eksempler\"\n\n# Create folder\nfs.touch(f\"{bucket}/{folder}/testmappe/\")\n```\n\n## {{< fa brands r-project >}}\n\nKommer snart\n\n:::\n\n",
    "supporting": [
      "jobbe-med-data_files"
    ],
    "filters": [],
    "includes": {}
  }
}