{
  "hash": "0d912ebc0fa76c238765d89083df8b02",
  "result": {
    "markdown": "---\ntitle: Kartdata\nfreeze: true\nexecute:\n    echo: false\n    include: true\n---\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nSist endret: 2024-04-24\n```\n:::\n:::\n\n\nDet er tilrettelagt kartdata i Dapla til analyse, statistikkproduksjon og visualisering. \nDet er de samme dataene som er i GEODB i vanlig produksjonssone. Kartdataene er lagret på **ssb-kart-data-delt-prod**.\nDe er lagret som parquetfiler i standardprojeksjonen vi bruker i SSB (UTM sone 33N) hvis ikke annet er angitt. \nDet er også SSBs standard-rutenett i ulike størrelser samt Eurostats rutenett over Norge.\n\nI tillegg ligger det noe **testdata** i fellesbøtta her: **ssb-dapla-felles-data-produkt-prod/GIS/testdata**\n\n## Python\n### GIS-pakker og lesing/skriving av geodata\n**Geopandas** er et Python-bibliotek som integrerer Pandas med GIS-analysering og kartlegging.\nGeopandas er bygd opp rundt GeoDataFrames, som er en pandas DataFrame med geografisk informasjon. \nDisse kan lastes inn direkte hvis man har geografiske filer, eller man kan konvertere fra DataFrames \nmed koordinat-kolonner (se eksempel under).\n\nGeopandas kan blant annet brukes til å kartlegge dataene, beregne avstander og labe variabler for nærmiljø ved å koble datasett sammen basert på geografisk overlapp.\n\nFor lesing og skriving av geodata i Dapla, kan man bruke SSB-pakken **sgis**. Med denne kan man blant annet også beregne reisetider langs veg og lage publiseringsverdige kart. \n\nPakkene kan installeres i Dapla sånn her:\n\n```{.bash filename=\"terminal\"}\npoetry add geopandas\npoetry add ssb-sgis\n```\n\nOg så importeres det i Python på vanlig vis.\n\n```{.python filename=\"notebook\"}\nimport geopandas as gpd\nimport sgis as sg\n```\n\n**Eksempel på lesing/skriving av kartdata**\n\nMan kan lese/skrive geodata i Dapla med sgis-funksjonene read_geopandas og write_geopandas. \nStøttede formater er blant annet (geo)parquet, geojson og gml.\nEn rekke kartdata for hele landet til analyse- og visualiseringsformål ligger i bøtta \"kart\". \nFor eksempel kommuneflater til analyse eller statistikk:\n\n```{.python filename=\"notebook\"}\nfilsti = \"ssb-kart-data-delt-prod/analyse_data/klargjorte-data/2024/ABAS_kommune_flate_p2024_v1.parquet\"\nkommuner = sg.read_geopandas(filsti)\n```\n\nEksempel på lesing av kommuneflater for visualisering. Disse dataene er generalisert slik at de egner seg for\nå lage kart, men blir unøyaktige til statistikk:\n\n```{.python filename=\"notebook\"}\nfilsti = \"ssb-kart-data-delt-prod/visualisering_data/klargjorte-data/2024/parquet/N5000_kommune_flate_p2024_v1.parquet\"\nkommuner = sg.read_geopandas(filsti)\n```\n\nTilsvarende for skriving til parquet eller annet geodataformat:\n\n```{.python filename=\"notebook\"}\nsg.write_geopandas(kommuner, filsti_ny) \n```\n\nMan kan også gjøre vanlige tabell-filer geografiske hvis man har koordinat-kolonner. For eksempel situasjonsuttak fra Virksomhets- og foretaksregisteret (VoF):\n\n```{.python filename=\"notebook\"}\nimport dapla as dp\n\nVOFSTI = \"ssb-vof-data-delt-stedfesting-prod/klargjorte-data/parquet\"\nvof_df = dp.read_pandas(\n    f\"{VOFSTI}/stedfesting-situasjonsuttak_p2023-01_v1.parquet\"\n)\nvof_gdf = gpd.GeoDataFrame(\n    vof_df, \n    geometry=gpd.points_from_xy(\n        vof_df[\"y_koordinat\"],\n        vof_df[\"x_koordinat\"],\n    ),\n    crs=25833,\n)\nvof_gdf\n```\n\n### geopandas-eksempler i Dapla\n\nI tillegg til kartdataene, ligger det testdata i fellesbøtta som man kan leke seg med. \nTestdataene finnes for Oslo og Kongsvinger, og kan leses sånn her:\n\n```{.python filename=\"notebook\"}\ntestdatasti = \"ssb-dapla-felles-data-produkt-prod/GIS/testdata\"\nveger = sg.read_geopandas(f\"{testdatasti}/veger_oslo.parquet\")\n```\n\nUnder følger noen eksempler på GIS-prosessering med testdataene. \n\n**Eksempel på avstandsberegning**\n\nAvstand i **luftlinje** finner man enkelt med sjoin_nearest. \nSånn her finner man avstand fra boligbygg (1000 tilfeldige) i Oslo til nærmeste butikkbygg.\n\n```{.python filename=\"notebook\"}\nboligbygg = sg.read_geopandas(f\"{testdatasti}/noen_boligbygg_oslo.parquet\")\nbutikkbygg = sg.read_geopandas(f\"{testdatasti}/butikkbygg_oslo.parquet\")\n\nboligbygg_med_butikkavstand = boligbygg.sjoin_nearest(butikkbygg, distance_col=\"meter_til_butikk\")\n```\n\nFor å finne avstand eller reisetid langs veier, kan man gjøre **nettverksanalyse** med sgis.\nMan må først klargjøre vegnettet og bestemme regler for beregningen(e):\n\n```{.python filename=\"notebook\"}\nveger_klargjort = (\n    sg.get_connected_components(veger)\n    .loc[lambda x: x[\"connected\"] == 1]\n    .pipe(sg.make_directed_network_norway, dropnegative=True)\n)\n\nregler = sg.NetworkAnalysisRules(directed=True, weight=\"minutes\")\n\nnwa = sg.NetworkAnalysis(network=veger_klargjort, rules=regler)\n```\n\nSå kan man beregne reisetider fra boligbygg til butikkbygg:\n\n```{.python filename=\"notebook\"}\navstander = nwa.od_cost_matrix(boligbygg, butikkbygg)\n```\n\nKorteste reisetid per bolig kan kobles på som kolonne i boligdataene sånn her:\n\n```{.python filename=\"notebook\"}\nboligbygg[\"minutter_til_butikk\"] = avstander.groupby(\"origin\")[\"minutes\"].min()\n```\n\nUndersøk resultatene i interaktivt kart:\n\n```{.python filename=\"notebook\"}\nsg.explore(boligbygg, butikkbygg, \"minutter_til_butikk\")\n```\n\nSe mer informasjon og eksempler i [dokumentasjonen.](https://statisticsnorway.github.io/ssb-sgis/reference/networkanalysis/networkanalysis.html#sgis.networkanalysis.networkanalysis.NetworkAnalysis.od_cost_matrix)\n\nOg [flere nettverksanalyse-eksempler her.](https://nbviewer.org/github/statisticsnorway/intro_til_geopandas/blob/main/3_nettverksanalyse_lang.ipynb)\n\n**Eksempel på geografisk kobling**\n\nDatasett kan kobles basert på geografisk overlapp med geopandas.sjoin. \nDenne fungerer akkurat som pandas.merge, bare at det kobles basert på geometrien.\n\nKodesnutten under returnerer én kommuneflate for hvert bygg som overlapper, med kolonner fra begge datasettene. \nInner-join er default, men med left-join beholder man også geometriene som ikke overlapper.\n\n```{.python filename=\"notebook\"}\nkommuner = sg.read_geopandas(f\"{testdatasti}/enkle_kommuner.parquet\")\nkommuner_med_boliginfo = kommuner.sjoin(boligbygg, how=\"left\")\n```\n\nMed motsatt rekkefølge, får man ett boligbygg per kommune den overlapper med. Siden byggene er punkter, vil hvert bygg havne i maksimalt én kommune. \n\n```{.python filename=\"notebook\"}\nboligbygg_med_kommuneinfo = boligbygg.sjoin(kommuner, how=\"left\")\n```\n\n**Eksempel på å lage kart**\n\nMan kan lage tematiske kart med sgis-klassen ThematicMap. Her er et enkelt eksempel på et kart over arealet i kommuner. \n\n```{.python filename=\"notebook\"}\nkommuner[\"Kvadratmeter\"] = kommuner.area\n\nm = sg.ThematicMap(kommuner, column=\"Kvadratmeter\", size=15)\nm.title = \"Areal i kommunene\"\nm.plot()\n```\n\n[Se flere kart-eksempler her.](https://statisticsnorway.github.io/ssb-sgis/examples/maps.html)\n\n**Konvertere DataFrame til GeoDataFrame**\n\nEn pandas.DataFrame med koordinat-kolonner, kan konverteres til GeoDataFrame sånn her:\n\n```{.python filename=\"notebook\"}\nimport pandas as pd\ndf = pd.DataFrame({\"x\": [10.8, 10.7, 10.9], \"y\": [59.9, 60, 59.85]})\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.x, df.y), crs=4326)\n```\n\nFor å beregne avtand i meter og kunne koble med annen geodata i Dapla, må man ha UTM-koordinater (hvis man ikke hadde det fra før):\n\n```{.python filename=\"notebook\"}\ngdf = gdf.to_crs(25833)\n```\n\n[Se også geopandas' dokumentasjon for mer utfyllende informasjon.](https://geopandas.org/en/stable/docs/user_guide.html)\n\n## R\nDen viktigste GIS-pakken i R er **sf**. Pakken er bygd opp rundt sf-objekter, \nsom er data.frames med geografisk informasjon. \nMan kan gjøre standard tidyverse-opersjoner på sf-objektene, pluss GIS-operasjoner. \n\nSindre Mikael Haugen har lagd [funksjoner for å lese og skrive](https://statisticsnorway.github.io/fellesr/articles/vignette__DAPLA_jukseark.html\n) blant annet geodata i Dapla. For å få geodata, setter man parametret 'sf' til TRUE:\n\n```{.r filename=\"notebook\"}\nlibrary(fellesr)\n\nveger = read_SSB(\"ssb-dapla-felles-data-produkt-prod/GIS/testdata/veger_oslo.parquet\", sf = TRUE)\n```\n\nHaugen har også lagd en [pakke for å gjøre nettverksanalyse](https://statisticsnorway.github.io/GISSB/articles/GISSB_vignette.html), \nsom også lar deg geokode adresser, altså å finne adressenes koordinater.\n\n```{.r filename=\"notebook\"}\nlibrary(GISSB)\n```\n\nLite eksempel på kobling basert geografisk sammenfall (enkle kommuner er egentlig til visualisering).\nHer får man ett bygg per kommune som overlapper (som maksimalt er én kommune siden dette er bygningspunkter):\n\n```{.r filename=\"notebook\"}\nlibrary(sf)\n\nboligbygg = read_SSB(\"ssb-dapla-felles-data-produkt-prod/GIS/testdata/noen_boligbygg_oslo.parquet\", sf = TRUE)\nenkle_kommuner = read_SSB(\"ssb-dapla-felles-data-produkt-prod/GIS/testdata/enkle_kommuner.parquet\", sf = TRUE)\n\nboligbygg_med_kommuneinfo = st_join(boligbygg, enkle_kommuner)\n```\n\nMed motsatt rekkefølge, får man én kommuneflate per bolig som overlapper:\n\n```{.r filename=\"notebook\"}\nkommuner_med_boliginfo = st_join(enkle_kommuner, boligbygg)\n```\n\n",
    "supporting": [
      "kartdata_files"
    ],
    "filters": [],
    "includes": {}
  }
}