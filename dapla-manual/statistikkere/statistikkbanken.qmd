# dapla-statbank-client

Pakken "dapla-statbank-client" kan brukes til å overføre tabeller til Statistikkbanken fra Jupyterlab i prodsonen og på Dapla. Den henter også "filbeskrivelsen" som beskriver formen dataene skal ha når de sendes inn til Statistikkbanken. Og den kan også hente publiserte data fra Statistikkbanken.
Pakken er en python-pakke som baserer seg på at dataene (deltabellene) lastes inn i en eller flere pandas DataFrames før overføring.
Ved å hente ned "filbeskrivelsen" kan man validere dataene sine (dataframene) mot denne lokalt, uten å sende dataene til Statistikkbanken. Dette kan være til hjelp under setting av formen på dataene. Å hente publiserte data fra Statistikkbanken kan gjøres gjennom løse funksjoner, eller via "klienten".

Lenker:
- [Pakken ligger her på Pypi.](https://pypi.org/project/dapla-statbank-client/) Og kan installeres via poetry med: `poetry add dapla-statbank-client`
- [Kodebasen for pakken ligger her](https://github.com/statisticsnorway/dapla-statbank-client), **readme-en gir en teknisk innføring** som du kan følge og kopiere kode fra, og om du finner noe du vil rapportere om bruken av pakken så gjør det gjerne under "issues" på github-sidene.
- [Noe demokode ligger i repoet](https://github.com/statisticsnorway/dapla-statbank-client/blob/main/demo/), og kan være ett godt utgangspunkt å kopiere og endre fra.


## Testoverføring fra STAGING - faktisk oppdatering fra PROD
Statistikkbanken opererer med ulike databaser for testing og produksjonssetting. Om du vil at tallene faktisk skal oppdateres på nettsidene så må du sende til Statistikkbankens "PROD"-database. Om du kun vil teste innsending skal du sende til databasen "TEST".
Disse databasene har de samme lastebrukerne, men passordene er ulike. Om du vil teste innsending må du derfor skaffe deg "test-passordet" til den lastebrukeren som du har tilgjengelig.
Om du faktisk vil sende inn data til publisering i Statistikkbanken må du være i dapla-prod (den vanlige): https://jupyter.dapla.ssb.no/ eller i prodsonen på: https://sl-jupyter-p.ssb.no/
For å sende til TEST-databasen til statbanken, så må du enten være i *staging* på dapla eller *prod* på dapla.
Staging finer du på disse adressene: https://jupyter.dapla-staging.ssb.no/ eller *staging* i prodosonen: https://sl-jupyter-t.ssb.no/
For å sende fra dapla-prod til statbankens TEST-database, må du bruke versjon 1.3.0+ av statbankpakken, og sende parameteret `use_db` inn når du oppretter clienten:
```{.python filename="notebook"}
# For å sende fra dapla-prod til statbankens test-database
client = StatbankClient(use_db="TEST")
```
For å teste tidlige i omlegging og sende inn til TEST-databasen, er det fint å skaffe seg noe data fra fjorårets publisering på et produksjonsløp man kjenner fra før. Evt. kan man hente data fra Statistikkbanken og sende disse tilbake snudd rett, og med riktig antall prikke-kolonner lagt til.


## Kode-eksempler 
[Se mer detaljer i readme-en på prosjektets kodebase.](https://github.com/statisticsnorway/dapla-statbank-client)


### Opprette client
For å kunne bruke pakken må du importere klienten:

```{.python filename="notebook"}
from statbank import StatbankClient
```
Så initialiserer du klienten med de innstillingene som oftest er faste på tvers av alle innsendingene fra ett produksjonsløp:

```{.python filename="notebook"}
statcli = StatbankClient(date="2050-01-01", overwrite=True, approve=2)
```
Her vil du bli bedt om å skrive inn lastebruker, og passordet til lastebrukeren.


### Overfør data
Om du har dataene klare er det bare å overføre, men du må vite navnet på deltabell-dat-filene. (Statistikkbanken lagrer disse ned igjen som dat-filer.)

```{.python filename="notebook"}
data_07495 = {"kargrs01fylker1.dat" : df_07495_fylker,
              "kargrs01landet1.dat" : df_07495_landet,}
statcli.transfer(data_07495, tableid="07495")
```
Etter innsending kommer det en link til Statistikkbankens GUI for å følge med på om innsendingen gikk bra hos dem.
Om det var det du ønsket, så er du nå ferdig... Men det finnes mer funksjonalitet her...


### Hent Filbeskrivelse
For å hente filbeskrivelsen til en hovedtabell bruker du denne metoden under klienten:

```{.python filename="notebook"}
filbeskrivelse = statcli.get_description(tableid="07495")
print(filbeskrivelse)
```

Med filbeskrivelsen kan du lett få en mal på dictionaryet du må plassere dataene i:

```{.python filename="notebook"}
filbeskrivelse.transferdata_template()
```

Du kan også validere dataene dine mot filbeskrivelsen:

```{.python filename="notebook"}
filbeskrivelse.validate(data_07495, tableid="07495")
```

## Problematikk knyttet til avrunding
Det tas noe ekstra ansvar i pakken rundt avrunding av desimaltall, da filbeskrivelsen inneholder informasjon om hvor mange desimaler som blir lagret per kolonne, kan vi runde av til rett antall samtidig som vi tar ett bevisst valg rundt "hvilken vei vi skal runde av". 
På barneskolen lærte vi at ved 2,5 avrundet til 0 desimaler, så runder vi opp til 3. Det samme skjer i utgangspunktet i SAS og Excel. Python og R runder derimot "mot nærmeste partall", så fra 2,5 blir det rundet til 2, men fra 1,5 blir det også rundet til 2. Dette er for å forhindre *bias i en retning*. Dvs. om alle tall rundes opp, vil en hel kolonne med tall "dras oppover", ved å gjøre annenhver opp og ned, vil ikke helheten bli "dratt en spesifikk vei".
Siden "round to even" ikke er det folk er vandte til, gjør vi derfor noe annet i denne pakken, enn det som er vanlig oppførsel i Python. **Vi runder opp.**
Om du bruker følgende metoden under filbeskrivelsen på dataene, så vil denne runde oppover, samtidig som den konverterer til en streng for å bevare formateringen.

```{.python filename="notebook"}
data_07495 = filbeskrivelse.round_data(data_07495)  # For å ta vare på endringene, så må du skrive tilbake over variabelen
```

## Annen funksjonalitet du kan lese om i readme-en er:
- En date-widget for å visuelt endre til en valid dato.
- Lagring av overføring og filbeskrivelses-objekter til json-filer
- Uthenting av logg fra klienten
- Henting av publisert data fra statbanken
- Rotering av tabeller fra statbanken



# Avansert bruk ved mellomlagring av filbeskrivelsene (mindre innskrivinger av passord / oppdeling i flere notebooks)
Filbeskrivelsene kan lagres som json med en metode, og åpnes med en annen (uten å bruke passord).
Om man skal jobbe med mange statbanktabeller i ett løp, så kan en ok inndeling av notebooks være:
1. Enkelt notebook for å hente alle filbeskrivelser (krever lastepassord)
2. Ett notebook per statbanktabell som omformer fra "statistikkfil" til det som skal sendes til statbanken. Kan bruke filbeskrivelsen til avrunding, validering. (krever ikke lastepassord)
3. Enkelt notebook for å sende alle tabellene til statbanken (krever lastepassord)

Man kan i teorien lagre filbeskrivelses-jsonfilene hvor man vil, de er ikke å anse som sensitive, men de kan utløpe på dato når metadata i statbanken blri oppdatert. 
Det kan derfor anbefales at du lagrer dem i Dapla-lab instansen din, dvs. i /work utenfor git-repoet du har klonet. De vil da bli slettet når du sletter tjenesten din, og det kan være ønskelig så de må hentes på nytt neste gang.

Ett eksempel på dette ligger i [Vgogjen-produksjonsløpet](https://github.com/statisticsnorway/stat-utd-vg-vgogjen/tree/main/src/notebooks/06_banktabeller).

Nøkkelfunksjonalitet i dette er:
```{.python filename="notebook"}
# Notebook for å hente alle filbeskrivelser
client = StatbankClient()  # Krever passord
for tab_id in config.statbanktabell_ider:
    filbesk = client.get_description(tab_nr)
    filbesk.to_json(f"~/work/filbesk/{tab_nr}.json")  # Sørg for at mappe finnes først kanskje

# Notebooks for alle statbanktabeller 
tab_nr = "12958"
filbesk = StatbankClient.read_description_json(f"filbesk/{tab_nr}.json")  # Krever ikke passord
data = filbesk.transferdata_template(tab_ut)
filbesk.validate(data)
data = filbesk.round_data(data)
for datfil in filbesk.subtables.keys():
    path = (path_root + "VG_gjforing/" + datfil).replace(".dat", ".parquet")
    data[datfil].to_parquet(path)

# Notebook for å laste alle tabellene 
client = StatbankClient(date=config.publiseringsdato)  # Krever passord
for tab_id in config.statbanktabell_ider:
    filbesk = client.read_description_json(f"~/work/filbesk/{tab_nr}.json")
    data = {}
    for datfil in filbesk.subtables.keys():
        fil = (path_root + "VG_gjforing/" + datfil).replace(".dat", ".parquet")
        data[datfil] = pd.read_parquet(fil)
        client.transfer(data, tabell)
```
