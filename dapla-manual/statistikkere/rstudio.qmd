---
title: Rstudio
freeze: true
execute:
    echo: false
    include: true
---

```{python}
import sys
import os
sys.path.append("..")

from functions.metadata import get_last_modified

file_path = os.path.abspath('rstudio.qmd')
print(get_last_modified(file_path, False))
```

![](../images/dapla-lab-rstudio.png){style="max-width: 350%; float: right;" fig-alt="Jupyter Service"}

**Rstudio** er en tjeneste på [Dapla Lab](./dapla-lab.html) for utvikling av kode i R^[**Rstudio** er [web-versjonen av Rstudio](https://posit.co/products/open-source/rstudio-server/) og er ikke helt identisk med desktop-versjonen som mange er kjent med.]. Målgruppen for tjenesten er brukere som skal skrive produksjonskode i R^[Python er ikke installert i Rstudio-tjenesten.].

Siden tjenesten er ment for produksjonskode så er det veldig få forhåndsinstallerte R-pakker. Antagelsen er at brukerene/teamet heller bør installere de pakkene de trenger, framfor at alle pakker som alle brukere/team er forhåndsinstallert og skal dekke behovet til alle. Det reduserer kompleksitet i tjenesten og dermed sannsynligheten for feilsituasjoner.

## Forberedelser

Før man starter **Rstudio** bør man ha lest [kapitlet om Dapla Lab](./dapla-lab.html) og satt opp Git- og GitHub-konfigurasjonen under **Min konto**. Deretter gjør du følgende:

1. Logg deg inn på [Dapla Lab](https://lab.dapla.ssb.no/)
2. Under **Tjenestekatalog** trykker du på **Start**-knappen for **Rstudio**
3. Gi tjenesten et navn
4. Åpne **Rstudio konfigurasjoner**

## Konfigurasjon

Før man åpner en tjeneste kan man konfigurere hvor mye ressurser man ønsker, hvilket team man skal representere, om et GitHub-repo skal klones ved oppstart, og mange andre ting. Valgene man gjør kan også lagres slik at man å slipper å gjøre samme jobb senere. @fig-dapla-lab-rstudio-service viser første fane i **Tjeneste**-fanen for Rstudio.

![Detaljert tjenestekonfigurasjon i Dapla Lab](../images/dapla-lab-rstudio-service.png){fig-alt="Viser tjenestekonfigurasjonen i Dapla Lab." #fig-dapla-lab-rstudio-service}

### Tjeneste

Under fanen **Tjeneste** kan man velge hvilke **Versjon** av Rstudio som skal startes^[Med versjon menes her hvilken Docker-container som skal bygges. Men i konfigurasjonen har vi forenklet valget ved å kun vise hvilke R-versjoner som skal gjelde.]. Siden Rstudio-tjenesten kun kommer installert med R så er det her man velger hvilken versjon man ønsker.

I @fig-dapla-lab-rstudio-service ser vi av navnet `r4.4.0-v54-2024.10.30` at tjenesten som default vil startes versjon 4.4.0 av R. Etter hvert som nye versjoner av R kommer vil disse tilgjengeliggjøres i tjenestekonfigurasjonen, men brukeren kan velge å starte en eldre versjon av tjenesten.

### Dapla

Under **Dapla**-fanen kan man velge **Aktiver** for å få tilgang til data fra bøtter i tjenesten. I tillegg må man da velge hvilket team og tilgangsgruppe man skal representere.

Aktiveres **Bøtter som filsystem** så blir bøttene til teamet tilgjengeliggjort som et vanlig filsystem under filstien `/buckets/`.

Under **Team og tilgangsgruppe** kan man velge hvilket team og tilgangsgruppe man skal representere i tjenesten. Man gjør dette ved å velge navnet på tilgangsgruppen, og denne er alltid på formen `<teamnavn>-<tilgangsgruppe>`. @fig-dapla-lab-konf-buckets viser at brukeren har valgt tilgangsgruppen *dapla-felles-developers*, dvs. at de representerer tilgangsgruppen *developers* for teamet *dapla-felles*. 

![Detaljert tjenestekonfigurasjon for bøttetilgang i Dapla Lab](../images/dapla-lab-konf-buckets.png){fig-alt="Viser tjenestekonfigurasjonen i Dapla Lab." #fig-dapla-lab-konf-buckets}

Under **Team og tilgangsgruppe** kan brukeren også velge å representere tilgangsgruppen *data-admins* for et team. I de tilfellene er det et krav om brukeren oppgir en skriftlig begrunnelse for hvorfor tilgangen er nødvendig. I tillegg må kan de maksimalt aktivere tilgangen i 8 timer. 

@fig-dapla-lab-konf-buckets-data-admins viser en bruker som aktiverer sin *data-admins* tilgang for team *dapla-felles*. Hvis brukeren ikke oppgir en begrunnelse vil de få en feilmelding ved oppstart av tjenesten.  

![Aktivere tilgang til kildedata for data-admins.](../images/dapla-lab-konf-buckets-data-admin.png){fig-alt="Viser tjenestekonfigurasjonen i Dapla Lab." #fig-dapla-lab-konf-buckets-data-admins}

### Ressurser

Under **Ressurser**-fanen kan brukeren velge hvor mye CPU og RAM man ønsker i tjenesten, slik som vist i @fig-dapla-lab-resources. Velg så lite trengs for å gjøre jobben du skal gjøre. 

![Konfigurasjon av ressurser for Jupyter-tjenesten i Dapla Lab](../images/dapla-lab-resources.png){fig-alt="Viser Resources-fanen i Jupyter-konfigurasjonen i Dapla Lab." #fig-dapla-lab-resources}

### Diskplass

Som default får alle som starter en instans av Jupyter-tjenesten en lokal disk på **10GB** inne i tjenesten. Under *Diskplass*-fanen kan man velge å øke størrelsen på disken eller ikke noe disk i det hele tatt. Siden lokal disk i tjenesten hovedsakelig skal benyttes til å lagre en lokal kopi av koden som lagres på GitHub mens man gjør endringer, så bør ikke størrelsen på disken være større enn nødvendig. @fig-dapla-lab-persistence viser valgene som kan gjøres under Diskplass-fanen. 

![Konfigurasjon av lokal disk for Jupyter-tjenesten i Dapla Lab](../images/dapla-lab-persistence.png){fig-alt="Viser Persitence-fanen i Jupyter-konfigurasjonen i Dapla Lab." #fig-dapla-lab-persistence}

### Git

Under fanen **Git** kan man konfigurere Git og GitHub slik at det blir lettere å jobbe med inne i tjenesten. Som standard arves informasjonen som er lagret under [*Min konto*-*Git* i Dapla Lab](./dapla-lab.html#git). Informasjonen under tjenestekonfigurasjonen blir tilgjengeliggjort som miljøvariabler i tjenesten. Informasjonen blir også lagt i `$HOME/.netrc` slik at man kan benytte ikke trenger å gjøre noe mer for å jobbe mot GitHub fra tjenesten.  

![Konfigurasjon av Git for Jupyter-tjenesten i Dapla Lab](../images/dapla-lab-konf-git.png){fig-alt="Viser Persitence-fanen i Jupyter-konfigurasjonen i Dapla Lab." #fig-dapla-lab-konf-git}

@fig-dapla-lab-konf-git viser at brukeren som standard får aktivert **Aktiver Git**. Dette innebærer at Git-brukernavn, Git e-post og GitHub-token arves fra brukerkonfigurasjonen. I tillegg så opprettes SSBs standard Git-konfigurasjon i `~/.gitconfig`. 

## Datatilgang

Hvis man har valgt å tilgjengeliggjøre data fra et team sitt bøtter i tjenesten, så kan man inspisere dataene fra en terminal inne i tjenesten: 

1. Åpne en instans av Rstudio med data fra bøtter 
2. Åpne en terminal inne i Rstudio
3. Gå til mappen med bøttene ved å kjøre dette fra terminalen `cd /buckets`
3. Kjør `ls -ahl` i teminalen for å se på hvilke bøtter som er montert.

## Installere pakker

Siden det nesten ikke er installert noen pakker i tjenesten så kan brukeren opprette et [renv](./jobbe-med-kode.qmd#r-og-renv) og installere pakker som ønsker. 

## Slette tjenesten

For å slette tjenesten kan man trykke på Slette-knappen i Dapla Lab under **Mine tjenester**. Når man sletter en tjeneste så sletter man hele disken inne i tjenesten og frigjør alle ressurser som er reservert. Siden pakkene som er installert også ligger lagret på disken, betyr dette at pakkene må installeres på nytt etter at en tjeneste er slettet. Vi anbefaler at man avslutter heller pauser tjenester som ikke benyttes.

## Pause tjenesten

Man kan pause tjenesten ved å trykke på Pause-knappen i Dapla Lab under **Mine tjenester**. Når man pauser så slettes alt påden lokale disken som ikke er lagret under `$HOME/work`. Vi anbefaler at man avslutter heller pauser tjenester som ikke benyttes.

## Monitorering

:::: {.columns}

::: {.column width="70%"}
Man kan moniterere en instans av Rstudio ved å trykke på Rstudio-teksten under Mine tjenester i Dapla Lab, slik som vist i @fig-dapla-lab-monitoring.

Denne funksjonaliteten er under arbeid og mer informasjon kommer snart. 
:::

::: {.column width="5%"}
<!-- empty column to create gap -->
:::

::: {.column width="25%"}
![Monitorering av Jupyter-tjenesten i Dapla Lab](../images/dapla-lab-monitoring.png){fig-alt="Viser Persitence-fanen i Jupyter-konfigurasjonen i Dapla Lab." #fig-dapla-lab-monitoring}
:::

::::

