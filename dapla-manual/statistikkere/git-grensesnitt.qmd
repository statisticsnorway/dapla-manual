---
title: Git-grensesnitt i Jupyter
---

I denne artikkelen viser vi hvordan man gjennomfører anbefalt [git arbeidsflyt](https://statistics-norway.atlassian.net/wiki/spaces/BEST/pages/3206283277/Hvordan+er+anbefalt+git+arbeidsflyt) i Jupyter med Git-grensesnittet. Man kan også se videoen om Git-grensesnittet laget av Carl Corneil: 

#### 0. Klone repository

Dette bør gjøres allerede før man starter Jupyter-tjenesten i tjenestekonfigurasjonen slik det er beskrevet i [artikkelen om Jupyter på Dapla Lab](jupyter.qmd#gitgithub) men vi viser det her likevel:

![Grensesnitt før kloning](../images/git-grensesnitt/git-clone1.png){#fig-git-clone1 fig-alt="Grensesnitt før kloning" width="40%"}



![Grensesnitt ved kloning](../images/git-grensesnitt/git-clone2.png){#fig-git-clone2 fig-alt="Grensesnitt ved kloning" width="50%"}

Fyll inn URLen til repoet med *.git* på slutten. F.eks: `https://github.com/statisticsnorway/dapla-manual.git`

#### 1. Lage ny gren

Når man har klonet kan man lage ny gren ved å navigere seg til repoet i filutforskeren.

![Oversikt grener](../images/git-grensesnitt/ny-gren1.png){#fig-ny-gren1 fig-alt="Oversikt av grener (branches)" width="35%"}

Trykk på *New Branch*

![Ny gren](../images/git-grensesnitt/ny-gren2.png){#fig-ny-gren2 fig-alt="Ny gren" width="50%"}

Velg *main* for så å skrive inn navn på den nye grenen. Trykk så *Create Branch*.

#### 2. Velg den nye grenen i grensesnittet

![Velg ny gren](../images/git-grensesnitt/velg-ny-gren.png){#fig-velg-ny-gren fig-alt="Velg ny gren" width="35%"}

#### 3. Git add etter endringer i repoet
Slik ser grensesnittet ut når du har gjort endringer i repoet:

![Grensesnittet ved ulagrede endringer](../images/git-grensesnitt/untracked-changes.png){#fig-untracked-changes fig-alt="Grensesnittet ved ulagrede endringer" width="35%"}

Trykk på `+` for å gjøre endringene klare til å lagres. Tilsvarer `git add`.

Slik bør grensesnittet se ut:

![Staged changes ](../images/git-grensesnitt/staged.png){#fig-staged fig-alt="Staged changes" width="35%"}

#### 4. Lagre endringene: git commit

Skriv hva som har endret seg slik vist i bildet nedenfor:

![Commit message](../images/git-grensesnitt/commit-message.png){#fig-staged fig-alt="Commit message" width="40%"}

Commit-meldingen er altså 'ny .py-fil'

Trykk så på `commit` for å lagre endringene

#### 5. Git push: send endringer opp til github.com 

Trykk på skyen med pilen som går oppover for å sende commiten til GitHub.

![Git push](../images/git-grensesnitt/git-push.png){#fig-staged fig-alt="Git push" width="40%"}