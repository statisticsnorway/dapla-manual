# Versjonering av datasett

Versjonering er obligatorisk når man jobber med data på dapla. Hovedgrunnen til at vi versjonerer er for å dekke kravet om uforanderlighet og etterprøvbarehet: altså at data-konsumenter (menneske eller maskin) skal ha kontroll på endringer. Les mer om prinsippet om uforanderlighet av data på [confluence-siden til IT-Arkitektur](https://statistics-norway.atlassian.net/wiki/spaces/Arkitektur/pages/2839707937/Prinsipp+1+Uforanderlighet+av+data).

Kort fortalt innebærer versjonering av data at datasettene lagret i skyen har versjonsnummer før filendelsen.
For eksempel: *framskrevne-befolkningsendringer_p2019_p2050**\_v1**.parquet*

**Det finnes unntak:** nyeste versjon bør dobbeltlagres - altså en fil uten versjonsnummer, og en fil med. Dette er for at man enkelt skal kunne lese inn siste versjon av et datasett (ved å utelate versjonssuffiks). I tillegg trenger en ikke å versjonere temporære data.

### Når skal man lagre ny versjon?

Følgende hendelser skaper ny versjon av et datasett:

  * Reberegninger av data med nye metoder.

  * Korrigeringer av verdier for eksisterende observasjoner/enheter i datasettet. 

    * *Selv manuell endring av bare én data-verdi (celle) i et stort datasett skaper en ny versjon!*

  * Lagt til nye og/eller fjernet observasjoner/enheter i datasettet.

  * Omkodinger, dvs. oppdatert/erstattet kodeverk.

  * Lagt til nye variabler. Dette skaper en ny versjon i og med at dette kan påvirke prosesser (programkode).

    * Hvis det gjøres vesentlige endringer (mange nye variabler) så bør det vurderes om dette er et annet (et helt nytt) datasett, ikke en ny versjon av et eksisterende datasett.

  * Fjernet variabler.

    * Ved fjerning av variabler fra et datasett bør det vurderes om dette egentlig er et annet (et helt nytt) datasett, ikke en ny versjon av et eksisterende datasett!

  * Andre strukturendringer, f.eks. bytte av datatyper eller formater.
  
Med andre ord: enhver endring skaper en ny versjon!

###  **Versjonering i praksis**

#### Flere versjoner av et datasett

For hver versjon som oppstår av datasettet opprettes det en ny fysisk fil hvor
versjonsnummeret økes med 1. Alle gamle versjoner av et datasett skal også
eksistere i mappen.

Etterhvert som man får flere versjoner av et datasett vil det se slik ut:

```{.yaml filename="Mappe med flere versjoner av et datasett"}
ssb-prod-team-personstatistikk-data-produkt-prod/  
└── befolkningsframskrivinger/  
    └── klargjorte_data/  
        ├── framskrevne-befolkningsendringer_p2019_p2050.parquet  
        ├── framskrevne-befolkningsendringer_p2019_p2050_v1.parquet  
        ├── framskrevne-befolkningsendringer_p2019_p2050_v2.parquet  
        └── framskrevne-befolkningsendringer_p2019_p2050_v3.parquet
```

::: {.callout-important}
## Permanente data skal ikke endres eller slettes 

**Tidligere delte/publiserte data skal ikke slettes eller overskrives!**  
*Det må derfor lagres fysiske filer for hver versjon av datasettet. Dette er viktig for at SSB skal oppfylle krav om etterprøvbarhet av statistikkene.*
:::

#### Deling av data som ikke har oppnådd stabil tilstand - versjon 0

Hvis det er behov for å dele data som er som er i “fart”, dvs. data som
fortsatt er under innsamling eller pågående klargjøring, gjøres dette ved å
bruke *versjonsnummer 0* i filnavnet. Versjonsnummer 0 skal kun brukes
midlertidig fram til datasettet oppnår stabil tilstand. Ved stabil tilstand
byttes versjonsnummer for datasettet til 1 eller høyere.

#### Eksempelkode: Finne neste versjonsnummer med python-kode


```python{.yaml filename="Python kode fra SSB-fagfunksjoner for finne neste versjonsnummer"}

# TBC: må skrive python kode som returnere neste versjonsnummer. La oss si vi har fire filer (en uten versjon, og til og med v3): da skal funksjonen returnere '_v4' eller bare '4'

from fagfunksjoner import get_next_fileversion
```