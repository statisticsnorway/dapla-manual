---
title: dapla-toolbelt-metadata
date-modified: "01/31/2025"
---

[dapla-toolbelt-metadata](https://pypi.org/project/dapla-toolbelt-metadata/) er en Python-pakke for √• jobbe med metadatasystemene p√• Dapla. Pakken gir brukeren et Python-grensesnitt for √• jobbe mot [Datadoc](./datadoc.qmd) og [Vardef](./vardef.qmd).

## Forberedelser

dapla-toolbelt-metadata kan installeres i tjenester p√• Dapla Lab. Siden det er en Python-pakke s√• m√• den installeres i en tjeneste der Python er installert. Deretter gj√∏r du f√∏lgende:

1.  √Öpne en tjeneste p√• [Dapla Lab](https://lab.dapla.ssb.no/) med Python installert. F√∏r du √•pner tjenesten m√• du velge √• representere team og tilgangsgruppe som har tilgang til dataene som skal dokumenteres.
2.  Installer pakken i et [ssb-project](./ssb-project.qmd) p√• f√∏lgende m√•te:

``` {.bash filename="Terminal"}
poetry add dapla-toolbelt-metadata
```

Etter det er du klar for bruke funksjonaliteten i *dapla-toolbelt-metadata* i en notebook.

::: {.callout-caution}
## Dapla Lab og dapla-toolbelt-metadata
I Dapla Lab velger man hvilket team og tilgangsgruppe man skal representere f√∏r man √•pner en tjeneste. Hvis man f.eks. skal dokumentere et datasett i datatilstanden [inndata](./datatilstander.qmd#inndata) for et team som heter **dapla-felles**, s√• m√• man logge seg inn i en tjeneste som **dapla-felles-developers**, hvis ikke har man ikke tilgang til datasettet. 

I tillegg s√• benytter Vardef bl.a. informasjon om hvilket team og tilgangsgruppe du logget deg inn som, for definere hvilket team som blir eier av en nyopprettet variabeldefinisjon. P√• samme m√•te bruker Vardef denne informasjonen til √• avgj√∏re om en bruker har tilgang til √• endre en definisjon. F.eks. vil en bruker som logger seg inn som **dapla-felles-developers** og oppretter en ny definisjon, s√• vil **dapla-felles** st√• som eier av definisjonen og det vil kun v√¶re medlemmer av dette teamet som kan gj√∏re endringer i definisjonen.  
:::


## Datadoc

[Datadoc](./datadoc.qmd) er SSBs system for dokumentasjon av datasett. F√∏rste gang man skal dokumentere et datasett i Datadoc s√• er det anbefalt √• bruke det grafiske grensesnittet i [Datadoc-editor](./datadoc-editor.qmd). I l√∏pende produksjon er det dermed anbefalt √• benytte en programmatisk tiln√¶rming gjennom `Datadoc`-klassen i Python-pakken [dapla-toolbelt-metadata](https://pypi.org/project/dapla-toolbelt-metadata/).

### Dokumentere ny periode

Hvis man har dokumentert datasett for *periode t* med [Datadoc-editor](./datadoc-editor.qmd), s√• kan man programmatisk dokumentere *periode t+1* ved √• benytte `Datadoc`-klassen i dapla-toolbelt-metadata. Det forutsetter at det kun nye data som har kommet til og at det er den eneste endringen i dataene. Da kan man dokumentere den nye perioden p√• f√∏lgende m√•te:

``` {.python filename="Notebook"}
from dapla_metadata.datasets import Datadoc

meta = Datadoc(
    dataset_path="gs://ssb-dapla-felles-data-produkt-prod/datadoc/sykefratot/klargjorte_data/person_testdata_p2022_v1.parquet",             # <1>
    metadata_document_path="gs://ssb-dapla-felles-data-produkt-prod/datadoc/sykefratot/klargjorte_data/person_testdata_p2021_v1__DOC.json", # <2>
)
meta.write_metadata_document() # <3>
```

1.  `dataset_path` angir det nye datasettet som skal dokumenteres.
2.  `metadata_document_path` angir sti til tidligere periodes metadata.
3.  `write_metadata_document` er kommandoen som produserer de nye metadataene og skriver de til filen `gs://ssb-dapla-felles-data-produkt-prod/datadoc/sykefratot/klargjorte_data/person_testdata_p2022_v1__DOC.json`.

Det veldig viktig at man ikke bruker denne metoden hvis det er endringer i hvilke kolonner som finnes i datasettet eller andre st√∏rre endringer. Metoden over antar at den eneste informasjonen som har endret seg er den som kan leses ut av filstien. Ved st√∏rre endringer i selve dataene b√∏r man heller gj√∏re en manuell gjennomgang av metadataene med [Datadoc-editor](./datadoc-editor.qmd)

## Vardef (WIPüë∑‚Äç‚ôÇÔ∏è)

[Vardef](./vardef.qmd) er SSBs system for dokumentasjon av variabler. Vardef best√•r av et sentralt datalager som man kan interagere med [via et API](https://vardef.intern.test.ssb.no/). Statistikere og forskere i SSB kan benytte seg av API-et gjennom `Vardef`-klassen i Python-pakken [dapla-toolbelt-metadata](https://pypi.org/project/dapla-toolbelt-metadata/), som er et mer brukervennlig grensesnitt tilpasset Dapla Lab. Pakken lar brukeren bl.a. gj√∏re f√∏lgende:

- Liste ut alle definisjoner.
- Migrere definisjoner fra Vardok^[Vardok er SSBs tidligere system for variabeldefinisjoner og som erstattes av Vardef.].
- Opprette ny definisjon
- Endre eksisterende definisjon

Eksemplene under forutsetter at du har gjort f√∏lgende importer i en notebook p√• Dapla Lab:

```{.python filename="Notebook"}
from dapla_metadata.variable_definitions import Vardef, models
```

### Liste ut variabeldefinisjoner

For √• lese inn alle variabeldefinisjoner fra Vardef kan man bruke `list_variable_definitions()`-funksjonen:

```{.python filename="Notebook"}
variable_definitions = Vardef.list_variable_definitions()
variable_definitions
```

`list_variable_definitions()` returnerer en liste med *dictionaries* med alle variabeldefinisjoner i Vardef, inkludert **Utkast**, **Publisert internt** og **Publisert eksternt**. Under er det noen kode-eksempler p√• hvordan man kan kan filtrere eller endre p√• denne listen med Python for de som m√•tte √∏nske det.

#### Filtrere enkeltfelt for alle definisjoner

Bruk f√∏lgende kode for √• liste ut ID, navn, kortnavn, definisjon, eierteam og status for alle definisjoner i Vardef:
 
```{.python filename="Notebook"}
for variable in variable_definitions:
    print(
        f"Id: {variable.id}\n"
        f"Navn: {variable.name}\n"
        f"Kortnavn: {variable.short_name}\n"
        f"Definisjon: {variable.definition}\n"
        f"Eier: {variable.owner}\n"
        f"Status: {variable.variable_status}\n"
    )
```
::: {.callout-caution collapse="true"}
## Se output fra kode

```{.python filename="Notebook"}
Id: 5eC5YUVR
Navn: {'nb': 'test navn', 'nn': 'test namn', 'en': 'test name'}
Kortnavn: test_shortname2
Definisjon: {'nb': 'Skriv en definisjonstekst p√• norsk bokm√•l.', 'nn': 'Skriv ein definisjonstekst p√• nynorsk.', 'en': 'Write a definition text in english.'}
Eier: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Status: VariableStatus.PUBLISHED_INTERNAL

Id: fDun32UF
Navn: {'nb': 'test navn', 'nn': 'test namn', 'en': 'test name'}
Kortnavn: test_shortname_obr
Definisjon: {'nb': 'Skriv en definisjonstekst p√• norsk bokm√•l.', 'nn': 'Skriv ein definisjonstekst p√• nynorsk.', 'en': 'Write a definition text in english.'}
Eier: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Status: VariableStatus.DRAFT

Id: Xww0Swou
Navn: {'nb': 'Inntekt etter skatt', 'nn': None, 'en': 'After-tax income'}
Kortnavn: wies
Definisjon: {'nb': 'Yrkesinntekter, kapitalinntekter, skattepliktige og skattefrie overf√∏ringer, i l√∏pet av kalender√•ret. Utlignet skatt og negative overf√∏ringer er trukket i fra.', 'nn': None, 'en': 'After-tax income is calculated as the sum of wages and salaries, income from self-employment, property income and transfers received minus total assessed taxes and negative transfers.'}
Eier: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Status: VariableStatus.DRAFT

Id: ouMrO8E6
Navn: {'nb': 'test navn', 'nn': 'test namn', 'en': 'test name'}
Kortnavn: test_shortname
Definisjon: {'nb': 'Skriv en definisjonstekst p√• norsk bokm√•l.', 'nn': 'Skriv ein definisjonstekst p√• nynorsk.', 'en': 'Write a definition text in english.'}
Eier: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Status: VariableStatus.DRAFT
```

:::

#### Filtrere p√• ID

Hvis man vet ID-en til definisjon i Vardef s√• kan man hente ut variabeldefinisjonen med f√∏lgende kode:

```{.python filename="Notebook"}
single_definition = Vardef.get_variable_definition("fDun32UF")
print(single_definition)
```
I eksempelet printes all feltene i definisjonen med ID **fDun32UF**. 

::: {.callout-caution collapse="true"}
## Se output fra kode

```{.python filename="Notebook"}
{
  "id": "fDun32UF",
  "patch_id": 1,
  "name": {
    "nb": "test navn",
    "nn": "test namn",
    "en": "test name"
  },
  "short_name": "test_shortname_obr",
  "definition": {
    "nb": "Skriv en definisjonstekst p√• norsk bokm√•l.",
    "nn": "Skriv ein definisjonstekst p√• nynorsk.",
    "en": "Write a definition text in english."
  },
  "classification_reference": "91",
  "unit_types": [
    "01"
  ],
  "subject_fields": [
    "al"
  ],
  "contains_special_categories_of_personal_data": false,
  "variable_status": "DRAFT",
  "measurement_type": null,
  "valid_from": "2024-12-18",
  "valid_until": null,
  "external_reference_uri": null,
  "comment": null,
  "related_variable_definition_uris": null,
  "owner": {
    "team": "dapla-felles",
    "groups": [
      "dapla-felles-developers"
    ]
  },
  "contact": null,
  "created_at": "2025-02-03T13:15:44.366000",
  "created_by": "obr@ssb.no",
  "last_updated_at": "2025-02-03T13:15:44.366000",
  "last_updated_by": "obr@ssb.no"
}
```

:::


#### Filtrere p√• gyldighetsperiode

Siden alle definisjoner i Vardef er versjonert og har en gyldighetsperiode, s√• kan man filtrere hvilke definisjoner som var gyldig p√• et gitt tidspunkt:

```{.python filename="Notebook"}
from datetime import date

desired_validity = date(2030,2,24)
filtered_variable_definitions = Vardef.list_variable_definitions(desired_validity)
```

I koden over hentes alle som definert som gyldig per 24. februar 2030, inkludert definisjoner som ikke har en sluttdato. Vi importerer ogs√• [datetime](https://docs.python.org/3/library/datetime.html)-pakken for √• sikre at datoformatet blir riktig.

Vi kan igjen printe spesifikk informasjon om felter vi er interessert i:

```{.python filename="Notebook"}
print(f"Valid at {desired_validity}:\n")

for variable in filtered_variable_definitions:
    print(
        f"Id: {variable.id}\n"
        f"Name: {variable.name}\n"
        f"Short name: {variable.short_name}\n"
        f"Definition: {variable.definition}\n"
        f"Owner: {variable.owner}\n"
        f"Valid: {variable.valid_from} to {variable.valid_until}\n"
    )

```
::: {.callout-caution collapse="true"}
## Se output fra koden

```{.python filename="Notebook"}
Valid at 2030-02-24:

Id: fDun32UF
Name: {'nb': 'test navn', 'nn': 'test namn', 'en': 'test name'}
Short name: test_shortname_obr
Definition: {'nb': 'Skriv en definisjonstekst p√• norsk bokm√•l.', 'nn': 'Skriv ein definisjonstekst p√• nynorsk.', 'en': 'Write a definition text in english.'}
Owner: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Valid: 2024-12-18 to None

Id: Xww0Swou
Name: {'nb': 'Inntekt etter skatt', 'nn': None, 'en': 'After-tax income'}
Short name: wies
Definition: {'nb': 'Yrkesinntekter, kapitalinntekter, skattepliktige og skattefrie overf√∏ringer, i l√∏pet av kalender√•ret. Utlignet skatt og negative overf√∏ringer er trukket i fra.', 'nn': None, 'en': 'After-tax income is calculated as the sum of wages and salaries, income from self-employment, property income and transfers received minus total assessed taxes and negative transfers.'}
Owner: {'team': 'dapla-felles', 'groups': ['dapla-felles-developers']}
Valid: 1993-01-01 to None
```

:::

#### Filtrere p√• eierteam

Man kan filtrere ut alle definisjoner som eies av speisifikt team. I eksempelet under listes det ut hvilke definisjoner som eies av team **dapla-felles**: 

```{.python filename="Notebook"}
owner_team = "dapla-felles"
print(f"\nFiltrer etter eierteam {owner_team}: \n")
my_team_variables = [variable for variable in variable_definitions if variable.owner["team"] == owner_team]

for variable in my_team_variables:
    print(f"Id: {variable.id}\nName: {variable.name['nb']}\nShort name: {variable.short_name}\nDefinition: {variable.definition['nb']}\nOwner: {variable.owner['team']}\n")
```

::: {.callout-caution collapse="true"}
## Se output fra koden

```{.python filename="Notebook"}
Filtrer etter eierteam dapla-felles: 

Id: fDun32UF
Name: test navn
Short name: test_shortname_obr
Definition: Skriv en definisjonstekst p√• norsk bokm√•l.
Owner: dapla-felles

Id: Xww0Swou
Name: Inntekt etter skatt
Short name: wies
Definition: Yrkesinntekter, kapitalinntekter, skattepliktige og skattefrie overf√∏ringer, i l√∏pet av kalender√•ret. Utlignet skatt og negative overf√∏ringer er trukket i fra.
Owner: dapla-felles
```

:::

#### Filtrere etter status

Man kan filtrere etter status for en definisjon. Her filtrerer vi ut alle definisjoner med status **Draft**:

```{.python filename="Notebook"}
print("\nFiltrer etter status `DRAFT`: ")
draft_variables = [variable for variable in variable_definitions if variable.variable_status == models.VariableStatus.DRAFT]
print(draft_variables)
```

P√• samme m√•te kan vi filtrere ut definisjoner som er publisert internt:

```{.python filename="Notebook"}
print("\nFiltrer etter status `PUBLISHED INTERNAL`: ")
published_intern_variables = [variable for variable in variable_definitions if variable.variable_status == models.VariableStatus.PUBLISHED_INTERNAL]

print(published_intern_variables)
```

#### Filtrere etter kortnavn

Man kan hente ut en definisjon basert p√• kortnavn p√• f√∏lgende m√•te:

```{.python filename="Notebook"}
variable_by_short_name = next(variable for variable in variable_definitions if variable.short_name == "wies")

print(variable_by_short_name)
```

#### Enkeltfelter i en definisjon

Hvis man kun √∏nsker √• hente ut verdien til et enkeltfelt i en variabeldefinisjon kan man gj√∏re det p√• f√∏lgende m√•te:

```{.python filename="Notebook"}
wies_vardef = next(variable for variable in variable_definitions if variable.short_name == "wies")
wies_definition_nb = wies_vardef.definition["nb"]
wies_definition_nb
```

::: {.callout-caution collapse="true"}
## Se output fra koden

```{.python filename="Notebook"}
'Yrkesinntekter, kapitalinntekter, skattepliktige og skattefrie overf√∏ringer, i l√∏pet av kalender√•ret. Utlignet skatt og negative overf√∏ringer er trukket i fra.'
```

:::

I koden over hentes beskrivelsen av variabelen med kortnavn **wies** p√• norsk bokm√•l. Sp√∏rring returnerer en string-objekt. 

### Opprette ny definisjon

N√•r man skal opprette en ny definisjon i Vardef, s√• m√• man forholde seg til hvordan eierskapet til definisjonen blir definert. Nye definisjoner kan kun opprettes fra en tjeneste p√• Dapla Lab med Python installert, og teamet man velger √• representere n√•r man logger seg inn i tjenesten, blir automatisk satt som eier av definisjonen i Vardef. Dette kan endres senere, men det letteste er at noen fra teamet som skal eie definisjonen gj√∏r opprettelsen fra Dapla Lab.

Stegene for √• opprette en ny variabeldefinisjon er som f√∏lger:

1. Opprette et utkast (*draft*) av definisjonen med all obligatorisk informasjon.
2. Publisere variabelen internt eller eksternt.

Publisering av en definisjon internt at det kun vil v√¶re SSB-ansatte som f√•r tilgang til den. √Ö publisere eksternt betyr at den er tilgjengelige for andre ogs√•. F√∏r man publiserer et utkast er det god praksis at informasjonen er kvalitetssikret av flere personen, spesielt siden en publisert definisjon aldri kan slettes. Endringer i en definisjon genererer kun en ny versjon eller mindre endring.

#### Opprette et utkast

F√∏rste steg for √• publisere en ny variabeldefinisjon til Vardef er √• opprette et utkast eller *draft*. Et utkast m√• inneholde all [obligatorisk informasjon](https://statistics-norway.atlassian.net/wiki/spaces/MPD/pages/3009839199/VarDef+-+Krav+til+dokumentasjon+av+variabler) for en variabeldefinisjon. Et viktig poeng her er at utkastet ogs√• lagres datalageret til Vardef, og det sjekkes derfor ved opprettelse om all obligatorisk informasjon er fylt ut. Men n√•r en variabel har status utkast i Vardef s√• er det tillatt √• endre alle felter uten at en ny versjon opprettes.

Man kan opprette en ny definisjon ved √• bruke `Draft`-funksjonen `models`-klassen:

```{.python filename="Notebook"}
utkast = models.Draft(
    name = {
        "nb": "test navn",
        "nn": "test namn",
        "en": "test name",
    },
    short_name= "test_shortname",
    definition= {
        "nb": "Skriv en definisjonstekst p√• norsk bokm√•l.",
        "nn": "Skriv ein definisjonstekst p√• nynorsk.",
        "en": "Write a definition text in english.",
    },
    classification_reference="91",
    unit_types=[
        "01",
    ],
    subject_fields=[
        "al",
    ],
    contains_special_categories_of_personal_data=False,
    measurement_type=None,
    valid_from=date(2024,12,18),
    external_reference_uri=None,
    comment=None,
    related_variable_definition_uris=None,
    contact=None,
)

my_draft = Vardef.create_draft(utkast)
```

I koden over s√• har vi fylt inn all obligatorisk informasjon for de nye variabeldefinisjon i `utkast`-variabelen. Deretter har vi publisert den til datalageret til Vardef med `create_draft`-funksjonen. I tillegg ble den nye variabelen lagret i en variabel kalt `my_draft` for √• lettere kunne endre p√• variabelen senere. 

Vi kan innholdet i variabelen som vi har lagret i datalageret til Vardef p√• f√∏lgende m√•te:

```{.python filename="Notebook"}
print(my_draft)
```
Vi kan ogs√• aksessere enkeltfelter via dette objektet. F.eks. kan vi hente ut det maskingenererte feltet **created_by** for √• validere brukerens navn er registrert:

```{.python filename="Notebook"}
print(my_draft.created_by)
```

#### Publisere et utkast

Etter at informasjonen i et utkast er kvalitetssikret og ferdig, kan den publiseres internt (kun SSB-ansatte) eller eksternt (√•pent for alle). Det er verdt √• merke seg at en definisjon som er publisert eksternt ikke kan endres til √• kun v√¶re publisert internt.

N√•r man publiserer en definisjon er det anbefalt √• bruke `VariableStatus`-klassen for √• minimere sannsynligheten for skrivefeil i dette viktige steget. 

```{.python filename="Notebook"}
update_status = models.UpdateDraft(
    variable_status=models.VariableStatus.PUBLISHED_INTERNAL,
)

my_draft.update_draft(update_status)
```

Lister man ut alle variabeldefinisjoner vil man n√• se at denne variabelen har f√•tt  
`"variable_status": "PUBLISHED_INTERNAL"`.


### Endre eksisterende definisjon

Variabeldefinisjoner i Vardef har enten status som **publisert internt**, **publisert eksternt** eller **utkast**. En definisjon med status *utkast* kan endres av eierteamet p√• en enkel m√•te. Men endringer i variablerdefinisjoner som er *publisert internt* eller *eksternt* omfattes av prinsippet om uforanderlighet i Vardef. En definisjon som har blitt publisert slettes aldri, og endringer kan kun skje ved √• opprette nye versjoner. Det finnes to typer av versjoner i Vardef:

1. **Mindre endringer (*patches*)**  
Mindre endringer som ikke betyr noen innholdsmessige endring i beskrivelsen av variabelen. F.eks. retting av skrivefeil, legge til en oversettelse eller legge til `subject_field`. 
2. **St√∏rre endringer**  
Endringer som inneb√¶rer innholdsmessige endringer i variabelen. F.eks. en ny skatteregel krever at beskrivelsen for en skattevariabel m√• oppdateres.

#### Mindre endringer

Mindre endringer, kalt *patches* i Vardef, er mindre endringer som ikke krever en ny gyldighetsperiode for variabelen. Under er det noen eksempler p√• slike endringer og hvordan de gj√∏res:

##### Endre eierteam

```{.python filename="Notebook"}
from dapla_metadata.variable_definitions.generated.vardef_client.models.owner import (
    Owner,
)
from dapla_metadata.variable_definitions.generated.vardef_client.models.patch import (
    Patch,
)

new_owner = Patch(
    owner=Owner(
    team="dapla-felles",
    groups=[
        "dapla-felles-developers",
        "play-enhjoern-a-developers",
    ],
),
)

my_draft.create_patch(new_owner)

my_draft = Vardef.get_variable_definition(my_draft.id)

print(my_draft.owner)
```

#### St√∏rre endringer

For √• opprette en ny gyldighetsperiode m√• inndataene inneholde oppdatert beskrivelsestekst for alle gjeldende spr√•k og en ny gyldig fra dato. En ny gyldighetsperiode b√∏r kun opprettes n√•r den grunnleggende definisjonen av variabelen har endret seg.

```{.python filename="Notebook"}
valid_validity_period = models.ValidityPeriod(
    definition={
        "nb": "ny definisjon2",
        "nn": "ny definisjon2",
        "en": "new definition2",
    },
    valid_from=date(2040,4,5),
)
my_draft.create_validity_period(valid_validity_period)
```

### Migrere definisjon fra Vardok

Placeholder