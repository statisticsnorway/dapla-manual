---
title: "Standards"
last-modified: "2025-02-04"
---

## Navnestandard-validering

Modulen `standards` tilbyr metoder for å sjekke om filer i en bøtte bryter med den definerte [navnestandard](https://manual.dapla.ssb.no/statistikkere/navnestandard.html).

Du kan validere alt fra en enkel filsti til en hel bøtte. 

Under valideringen sjekkes det om bøtte-, mappe- eller filnavn faktisk eksisterer. 
Hvis du benytter en full filsti, er det også mulig å validere filer som ennå ikke er opprettet. 
I slike tilfeller vil resultatet inkludere følgende melding: `"Filen eksisterer ikke. Validerer uansett."`

For å effektivisere validering av bøtter med store mengder filer, benytter metoden asynkronitet.

### Kjøre navnestandard-validering

Begynn med å importere metoden som skal benyttes:

```{.python filename="Notebook"}
from dapla_metadata.standards.standard_validators import check_naming_standard
```
Siden metoden bruker asynkrone kall, må nøkkelordet `await` brukes foran metodenavnet.

Angi filstien til bøtte, mappe eller fil i anførselstegn, og kjør deretter valideringen.

Variabelen `results` vil inneholde en liste med resultater:

```{.python filename="Notebook"}
results = await check_naming_standard("Skriv inn filsti her")) 
```

#### Resultat
Hvert resultat i listen er et objekt som inneholder informasjon om valideringen, 
blant annet om den var vellykket og hvilke navnestandardkonvensjoner som eventuelt ble brutt.

Eksempel på valideringsresultat:
```{.python}
ValidationResult(
    success=False, 
    file_path="/buckets/produkt/stat/inndata/bil_v1.parquet", 
    messages=[
        "Det er oppdaget brudd på SSB-navnestandard:"
    ], 
    violations=[
        "Filnavn mangler gyldighetsperiode ref: https://manual.dapla.ssb.no/statistikkere/navnestandard.html#filnavn"
    ]
)
```

Her er et forslag til kode for å skrive ut resultatet på en lesbar måte:

```{.python filename="Notebook"}
violations = [r for r in results if not r.success]

if not violations:
    print("Gratulerer, ingen feil å vise")
else:
    for v in violations:
        print(v.file_path)
        print("\t" + "\n\t".join(v.messages))
        print("\t\t" + "\n\t\t".join(v.violations) + "\n")
```


### Produsere en oppsummering

Hvis du ønsker en kort oppsummering og vurdering av resultatet, kan du importere følgende metode:

```{.python filename="Notebook"}
from dapla_metadata.standards.standard_validators import generate_validation_report
```
Metoden tar en liste med valideringsresultater som input:

```{.python filename="Notebook"}
report = generate_validation_report(results)
```
Og hvis alt ser bra ut:

![Suksessfull validering](../images/dapla-toolbelt-metadata-standards-suksess.png){fig-width=20%}

### GitHub

Hvis du ønsker å laste opp notebooks med metoder til et eget repo, kan **pre-commit** hooks feile på grunn av bruken av nøkkelordet await utenfor en asynkron funksjon.

Dette er imidlertid ikke et problem i Notebooks og kan trygt ignoreres.

En enkel løsning er å legge til # noqa: F704 på samme linje som await, slik:

```{.python filename="Notebook"}
results = await check_naming_standard("Skriv inn filsti til bøtte, mappe eller fil her") # noqa: F704
``` 